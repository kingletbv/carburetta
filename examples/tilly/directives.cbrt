/* Copyright 2023-2024 Kinglet B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef STDLIB_H_INCLUDED
#define STDLIB_H_INCLUDED
#include <stdlib.h>
#endif

#ifndef VECTOR_INCLUDED
#define VECTOR_INCLUDED
#include <vector>
#endif

#ifndef STRING_H_INCLUDED
#define STRING_H_INCLUDED
#include <string>
#endif

#ifndef STDEXCEPT_INCLUDED
#define STDEXCEPT_INCLUDED
#include <stdexcept>
#endif

#ifndef ALGORTIHM_INCLUDED
#define ALGORITHM_INCLUDED
#include <algorithm>
#endif

#ifndef TILLY_PARSER_H_INCLUDED
#define TILLY_PARSER_H_INCLUDED
#include "tilly_parser.h"
#endif

#ifndef SITUS_H_INCLUDED
#define SITUS_H_INCLUDED
#include "situs.h"
#endif

#ifndef DIRECTIVES_DEFS_H_INCLUDED
#define DIRECTIVES_DEFS_H_INCLUDED
#include "directives_defs.h"
#endif

#ifndef DIRECTIVES_H_INCLUDED
#define DIRECTIVES_H_INCLUDED
#include "directives.h"   // include this so we grab the extern "C" on declarations
#endif

%scanner%
%prefix directives_

%common_class Situs

%params TillyParser &tp, Situs &input_situs

%token BANG TILDE PERCENT PERCENT_EQUALS AMPERSAND AMPERSAND_AMPERSAND
%token AMPERSAND_EQUALS PAR_OPEN PAR_CLOSE ASTERISK ASTERISK_EQUALS PLUS PLUS_PLUS
%token COMMA MINUS MINUS_MINUS MINUS_EQUALS DOT DOT_DOT_DOT SLASH SLASH_EQUALS
%token COLON SEMICOLON LT LT_LT LT_LT_EQUALS LT_EQUALS EQUALS EQUALS_EQUALS
%token BANG_EQUALS GT GT_EQUALS GT_GT GT_GT_EQUALS ARROW SQBRACE_OPEN SQBRACE_CLOSE
%token CARET CARET_EQUALS CUBRACE_OPEN CUBRACE_CLOSE BAR BAR_EQUALS BAR_BAR QUESTION_MARK
%token INTEGER_LIT FLOAT_LIT STRING_LIT CHAR_LIT IDENT SPECIAL_IDENT WHITESPACE
%token LABELS SYMBOLS TYPE

$: {
  // Move Situs from the input to the current match
  $.move_range(&input_situs, $endoffset - $offset, $text);
}

WHITESPACE: /\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*/ {
  /* C-Style comment (ignored) */
}

: / /.* {
  // C++ style comment
}

: [\x9\xb\xc\xd]+ {
  // Whitespace..
}

: (\r\n|\n) {
  // Newline (whitespace)
}

: [\ \t\v\r\n]+ {
  // Whitespace
}

LABELS: labels {}
SYMBOLS: symbols {}
TYPE: type {}

BANG: ! {}
TILDE: ~ {}
PERCENT: % {}
PERCENT_EQUALS: %= {}
AMPERSAND: & {}
AMPERSAND_AMPERSAND: && {}
AMPERSAND_EQUALS: &= {}
PAR_OPEN: \( {}
PAR_CLOSE: \) {}
ASTERISK: \* {}
ASTERISK_EQUALS: \*= {}
PLUS: \+ {}
PLUS_PLUS: \+\+ {}
COMMA: \, {}
MINUS: \- {}
MINUS_MINUS: \-\- {}

ASTERISK: \* {}
ASTERISK_EQUALS: \*= {}
PLUS: \+ {}
PLUS_PLUS: \+\+ {}
COMMA: \, {}
MINUS: \- {}
MINUS_MINUS: \-\- {}
MINUS_EQUALS: \-= {}
DOT: \. {}
DOT_DOT_DOT: \.\.\. {}
SLASH: / {}
SLASH_EQUALS: /= {}
COLON: \: {}
SEMICOLON: \; {}
LT: < {}
LT_LT: << {}
LT_LT_EQUALS: <<= {}
LT_EQUALS: <= {}
EQUALS: = {}
EQUALS_EQUALS: == {}
BANG_EQUALS: != {}
GT: > {}
GT_EQUALS: >= {}
GT_GT: >> {}
GT_GT_EQUALS: >>= {}
ARROW: \-> {}
SQBRACE_OPEN: \[ {}
SQBRACE_CLOSE: \] {}
CARET: \^ {}
CARET_EQUALS: \^= {}
CUBRACE_OPEN: \{ {}
CUBRACE_CLOSE: \} {}
BAR: \| {}
BAR_EQUALS: \|= {}
BAR_BAR: \|\| {}
QUESTION_MARK: \? {}

INTEGER_LIT: [1-9] [0-9] *(((U|u)(L|l|LL|ll)?)|((L|l|LL|ll)(U|u)?))? {}
INTEGER_LIT: 0[0-7]*(((U|u)(L|l|LL|ll)?)|((L|l|LL|ll)(U|u)?))? {}
INTEGER_LIT: 0[xX][0-9a-fA-F]+(((U|u)(L|l|LL|ll)?)|((L|l|LL|ll)(U|u)?))? {}
INTEGER_LIT: 0[bB][01]+(((U|u)(L|l|LL|ll)?)|((L|l|LL|ll)(U|u)?))? {}

FLOAT_LIT: ([0-9]+\.)|([0-9]*\.[0-9]+)([eE][\+\-]?[0-9]+)?[flFL]? {}
FLOAT_LIT: [0-9] +[eE][\+\-]?[0-9]+[flFL]? {}

STRING_LIT: L?"(\\.|[^"\\])*" {}
CHAR_LIT: L?'(\\.|[^'\\])*' {}

%class IDENT: std::string

IDENT: [a-zA-Z_] [0-9a-zA-Z_]* {
  // Identifier
  $$ = $text;
}

SPECIAL_IDENT: \$[0-9a-zA-Z_]*{}
SPECIAL_IDENT: \$\${}


%grammar%
%nt directive new-label-list new-symbol-list grammar label-list any-token any-token-list


grammar: directive;

$: {
  // Common action to join up tokens
  size_t n;
  for (n = 0; n < $len; ++n) {
    Situs token_loc;
    token_loc.clone_as_single_span_all_gaps_filled(&${n});
    $.concat(&token_loc);
  }
}

directive: PERCENT PERCENT {
  // %% means we switch from literal C code to whatever is the current mode; or back.
  return DIR_TOGGLE_CODE_SECTION;
}

directive: PERCENT LABELS new-label-list {
}

new-label-list: IDENT {
  if (std::find(tp.labels_.begin(), tp.labels_.end(), $0) != tp.labels_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Duplicate label: %s\n", ${0}.filename(), ${0}.line(), $0.c_str());
  }
  else if (std::find(tp.symbols_.begin(), tp.symbols_.end(), $0) != tp.symbols_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Label already exists as symbol: %s\n", ${0}.filename(), ${0}.line(), $0.c_str());
  }
  else {
    tp.labels_.push_back(std::move($0));
  }
}

new-label-list: new-label-list IDENT {
  if (std::find(tp.labels_.begin(), tp.labels_.end(), $1) != tp.labels_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Duplicate label: %s\n", ${1}.filename(), ${1}.line(), $1.c_str());
  }
  else if (std::find(tp.symbols_.begin(), tp.symbols_.end(), $1) != tp.symbols_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Label already exists as symbol: %s\n", ${1}.filename(), ${1}.line(), $1.c_str());
  }
  else {
    tp.labels_.push_back(std::move($1));
  }
}

directive: PERCENT SYMBOLS new-symbol-list {
}

new-symbol-list: IDENT {
  if (std::find(tp.symbols_.begin(), tp.symbols_.end(), $0) != tp.symbols_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Duplicate label: %s\n", ${0}.filename(), ${0}.line(), $0.c_str());
  }
  else if (std::find(tp.labels_.begin(), tp.labels_.end(), $0) != tp.labels_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Symbol already exists as label: %s\n", ${0}.filename(), ${0}.line(), $0.c_str());
  }
  else {
    tp.symbols_.push_back(std::move($0));
  }
}

new-symbol-list: new-symbol-list IDENT {
  if (std::find(tp.symbols_.begin(), tp.symbols_.end(), $1) != tp.symbols_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Duplicate label: %s\n", ${1}.filename(), ${1}.line(), $1.c_str());
  }
  else if (std::find(tp.labels_.begin(), tp.labels_.end(), $1) != tp.labels_.end()) {
    // Duplicate identifier
    fprintf(stderr, "%s(%d): Symbol already exists as label: %s\n", ${1}.filename(), ${1}.line(), $1.c_str());
  }
  else {
    tp.symbols_.push_back(std::move($1));
  }
}

%class label-list: std::vector<std::string>

label-list: IDENT {
  if (std::find(tp.symbols_.begin(), tp.symbols_.end(), $0) != tp.symbols_.end()) {
    fprintf(stderr, "%s(%d): symbol \"%s\" is not a label (symbols can't have a type)\n", ${0}.filename(), ${0}.line(), $0.c_str());
  }
  else if (std::find(tp.labels_.begin(), tp.labels_.end(), $0) == tp.labels_.end()) {
    fprintf(stderr, "%s(%d): label \"%s\" not found (note that symbols can't have a type)\n", ${0}.filename(), ${0}.line(), $0.c_str());
  }
  else {
    $$.push_back(std::move($0));
  }
}

label-list: label-list IDENT {
  if (std::find(tp.symbols_.begin(), tp.symbols_.end(), $1) != tp.symbols_.end()) {
    fprintf(stderr, "%s(%d): symbol \"%s\" is not a label (symbols can't have a type)\n", ${1}.filename(), ${1}.line(), $1.c_str());
  }
  else if (std::find(tp.labels_.begin(), tp.labels_.end(), $1) == tp.labels_.end()) {
    fprintf(stderr, "%s(%d): label \"%s\" not found (note that symbols can't have a type)\n", ${1}.filename(), ${1}.line(), $1.c_str());
  }
  else {
    $$ = std::move($0);
    $$.push_back(std::move($1));
  }
}

directive: PERCENT TYPE label-list COLON any-token-list {
  if ($2.size()) {
    size_t start_rng, end_rng;
    ${4}.get_byte_range(&start_rng, &end_rng);
    for (auto &label: $2) {
      for (auto itr = tp.label_types_.begin(); itr != tp.label_types_.end(); ++itr) {
        if (itr->first == label) {
          /* Already have a type declaration for this label, replace it */
          tp.label_types_.erase(itr);
          break;
        }
      }
      
      std::pair<std::string, std::string> tuple(label, std::string(tp.total_input_.begin() + start_rng, tp.total_input_.begin() + end_rng));
      tp.label_types_.push_back(std::move(tuple));
    }
  }
}

any-token: BANG;
any-token: TILDE;
any-token: PERCENT;
any-token: PERCENT_EQUALS;
any-token: AMPERSAND;
any-token: AMPERSAND_AMPERSAND;
any-token: AMPERSAND_EQUALS;
any-token: PAR_OPEN;
any-token: PAR_CLOSE;
any-token: ASTERISK;
any-token: ASTERISK_EQUALS;
any-token: PLUS;
any-token: PLUS_PLUS;
any-token: COMMA;
any-token: MINUS;
any-token: MINUS_MINUS;
any-token: MINUS_EQUALS;
any-token: DOT;
any-token: DOT_DOT_DOT;
any-token: SLASH;
any-token: SLASH_EQUALS;
any-token: COLON;
any-token: SEMICOLON;
any-token: LT;
any-token: LT_LT;
any-token: LT_LT_EQUALS;
any-token: LT_EQUALS;
any-token: EQUALS;
any-token: EQUALS_EQUALS;
any-token: BANG_EQUALS;
any-token: GT;
any-token: GT_EQUALS;
any-token: GT_GT;
any-token: GT_GT_EQUALS;
any-token: ARROW;
any-token: SQBRACE_OPEN;
any-token: SQBRACE_CLOSE;
any-token: CARET;
any-token: CARET_EQUALS;
any-token: CUBRACE_OPEN;
any-token: CUBRACE_CLOSE;
any-token: BAR;
any-token: BAR_EQUALS;
any-token: BAR_BAR;
any-token: QUESTION_MARK;
any-token: INTEGER_LIT;
any-token: FLOAT_LIT;
any-token: STRING_LIT;
any-token: CHAR_LIT;
any-token: IDENT;
any-token: SPECIAL_IDENT;
any-token: WHITESPACE;
any-token: LABELS;
any-token: SYMBOLS;
any-token: TYPE;

any-token-list: any-token;
any-token-list: any-token-list any-token;
