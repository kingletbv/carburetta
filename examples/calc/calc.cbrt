#include <stdio.h>

%scanner%
%prefix calc_

: [\ \n]+; /* skip whitespace */ 

PLUS: \+; MINUS: \-; ASTERISK: \*; SLASH: /; PAR_OPEN: \(; PAR_CLOSE: \); 
INTEGER: [0-9]+ { $$ = atoi($text); }

%token PLUS MINUS ASTERISK SLASH PAR_OPEN PAR_CLOSE INTEGER
%nt grammar expr term factor value

%grammar%

%type grammar expr term factor value: int

%token_type int
%constructor $$ = 0;
%params int *final_result

grammar: expr { 
  printf("Outcome: %d\n", $0); 
  *final_result = $0;
}

expr: term                      { $$ = $0; }
expr: expr PLUS term            { $$ = $0 + $2; }
expr: expr MINUS term           { $$ = $0 - $2; }
  
term: factor                    { $$ = $0; }
term: term ASTERISK factor      { $$ = $0 * $2; }
term: term SLASH factor         { $$ = $0 / $2; }

factor: value                   { $$ = $0; }
factor: MINUS factor            { $$ = -$1; }
factor: PAR_OPEN expr PAR_CLOSE { $$ = $1; }

value: INTEGER                  { $$ = $0; }

value: error                    { $$ = 0; fprintf(stderr, "Syntax error: value expected;\n"); }

%%

int main(int argc, char **argv) {
  int final_result, r;
  static char s[300];

  fprintf(stderr, "Enter an expression (-1 to terminate):\n");

  struct calc_stack stack;
  calc_stack_init(&stack);
  do {
    if (!fgets(s, sizeof(s), stdin)) {
      break;
    }
    while (_CALC_SYNTAX_ERROR == (r = calc_scan(&stack, s, strlen(s), 1, &final_result))) {
      fprintf(stderr, "Syntax error!\n");
    }
    if (r) {
      if (r != _CALC_SYNTAX_ERROR) {
        fprintf(stderr, "Error!\n");
        calc_stack_reset(&stack);
      }
    }
  } while (final_result != -1);
  calc_stack_cleanup(&stack);

  return final_result;
}
