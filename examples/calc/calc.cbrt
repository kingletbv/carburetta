#include <stdio.h>
#include <stdlib.h>

%scanner%
%prefix calc_

%mode flapdrol

<flapdrol> { 
INTEGER: F { $$ = 666; fprintf(stderr, "Flapdrol!\n"); calc_set_mode(stack, M_CALC_DEFAULT); }
}
//INTEGER: F { $$ = 666; fprintf(stderr, "Flapdrol!\n"); calc_set_mode(stack, M_CALC_DEFAULT); }
INTEGER: [0-9]+ { $$ = atoi($text); fprintf(stderr, "%s\n", $text);calc_set_mode(stack, M_CALC_DEFAULT); }

: [\ \n]+; /* skip spaces and newlines */
PLUS: \+; 
MINUS: \-;
ASTERISK: \*;
SLASH: /; 
PAR_OPEN: \(; 
PAR_CLOSE: \);

%token PLUS MINUS ASTERISK SLASH PAR_OPEN PAR_CLOSE INTEGER
%nt grammar expr term factor value



%grammar%

%type grammar expr term factor value INTEGER: int
%constructor $$ = 0;
%destructor /* destructing */ $$ = 0;

%common_type int
%destructor /* destructing common */ $$ = 0;

%params int *final_result

grammar: expr {
  printf("Outcome: %d\n", $0);
  *final_result = $0;
}

expr: term                      { $$ = $0; }
expr: expr PLUS term            { $$ = $0 + $2; }
expr: expr MINUS term           { $$ = $0 - $2; }
  
term: factor                    { $$ = $0; }
term: term ASTERISK factor      { $$ = $0 * $2; }
term: term SLASH factor         { $$ = $0 / $2; }
  
factor: value                   { $$ = $0; }
factor: MINUS factor            { $$ = -$1; }
factor: PAR_OPEN expr PAR_CLOSE { $$ = $1; }

value: INTEGER                  { $$ = $0; }

%%
void report_error(const char *msg) {
  fprintf(stderr, "%s", msg);
}
%%

value: error                    { $$ = 0; report_error("Syntax error: value expected;\n"); }
 
%%

int main(int argc, char **argv) {
  int value, r;
  static char s[300];
  
  fprintf(stderr, "Enter an expression (-1 to exit):\n");


  struct calc_stack stack;
  calc_stack_init(&stack);

  do {
    if (!fgets(s, sizeof(s), stdin)) {
      perror("Error reading");
      r = EXIT_FAILURE;
      break;
    }
    if (strlen(s) && (s[strlen(s) - 1] == '\n')) {
      /* Remove \n so we can check end of input */
      calc_set_input(&stack, s, strlen(s) - 1, 1);
    }
    else {
      calc_set_input(&stack, s, strlen(s), 1);
    }
    calc_set_mode(&stack, M_CALC_FLAPDROL);
    do {
      r = calc_scan(&stack, &value);
      if (r == _CALC_SYNTAX_ERROR) {
        fprintf(stderr, "Syntax error\n");
      }
    } while (r == _CALC_SYNTAX_ERROR);

    if (r) {
      if (r == _CALC_LEXICAL_ERROR) {
        fprintf(stderr, "Lexical error\n");
      }
      else {
        fprintf(stderr, "Unexpected error\n");
      }
      r = EXIT_FAILURE;
      break;
    }
  } while (value != -1);
  calc_stack_cleanup(&stack);

  return r;
}
