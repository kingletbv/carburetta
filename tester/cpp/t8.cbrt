/* Copyright 2020-2024 Kinglet B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdlib> // atoi

// stub object to keep count of how many 'grammar' nonterminals we have alive.
class GrammarObj {
public:
  static size_t open_grammar_count_;
  GrammarObj() { open_grammar_count_++; }
  ~GrammarObj() { open_grammar_count_--; }
};

// Value object for all valued nonterminals and the INTEGER terminal.
class Value {
public:
  static size_t open_value_count_;
  int value_ = 0;
  Value() : Value(0) {}
  Value(int val) : value_(val) {
    open_value_count_++;
  }
  ~Value() {
    --open_value_count_;
  }
  int value() const { return value_; }
  void set_value(int value) { value_ = value; }
  Value operator+(const Value &r) const { return Value(value() + r.value()); }
  Value operator-(const Value &r) const { return Value(value() - r.value()); }
  Value operator*(const Value &r) const { return Value(value() * r.value()); }
  Value operator/(const Value &r) const { return Value(value() / r.value()); }
  Value operator-() const { return Value(-value()); }
  Value &operator=(const Value &r) {
    set_value(r.value());
    return *this;
  }
};

size_t Value::open_value_count_ = 0;
size_t GrammarObj::open_grammar_count_ = 0;

%scanner%
%prefix t8_

INTEGER: [0-9]+ { $$ = Value(atoi($text)); }

: [\ \n]+; /* skip spaces and newlines */
PLUS: \+; 
MINUS: \-;
ASTERISK: \*;
SLASH: /; 
PAR_OPEN: \(; 
PAR_CLOSE: \);

%token PLUS MINUS ASTERISK SLASH PAR_OPEN PAR_CLOSE INTEGER
%nt grammar expr term factor value

%grammar%

%class expr term factor value INTEGER: Value

%class grammar: GrammarObj

%params int &final_result

grammar: expr {
  final_result = $0.value();
}

expr: term                      { $$ = $0; }
expr: expr PLUS term            { $$ = $0 + $2; }
expr: expr MINUS term           { $$ = $0 - $2; }
  
term: factor                    { $$ = $0; }
term: term ASTERISK factor      { $$ = $0 * $2; }
term: term SLASH factor         { $$ = $0 / $2; }
  
factor: value                   { $$ = $0; }
factor: MINUS factor            { $$ = -$1; }
factor: PAR_OPEN expr PAR_CLOSE { $$ = $1; }

value: INTEGER                  { $$ = $0; }

%%

extern "C" int t8() {
  int rv = -1;
  int r;

  const char sum[] = "1+2*-3";

  struct t8_stack stack;
  t8_stack_init(&stack);
  
  t8_set_input(&stack, sum, sizeof(sum) - 1, 1);
  int final_result = 0;
  r = t8_scan(&stack, final_result);
  if (r != _T8_FINISH) {
    rv = -2;
    goto fail;
  }
  if (final_result != -5) {
    rv = -3;
    goto fail;
  }

  /* At this point, the only object that should exist on the stack
   * is the grammar object; all value objects should be cleaned up. */
  if (Value::open_value_count_ > 0) {
    rv = -4;
    goto fail;
  }
  if (GrammarObj::open_grammar_count_ != 1) {
    rv = -5;
    goto fail;
  }

  /* Resetting the stack should clear out the only object on the stack,
   * being, the grammar object. */
  t8_stack_reset(&stack);

  if (GrammarObj::open_grammar_count_ > 0) {
    rv = -6;
    goto fail;
  }
  rv = 0;

fail:
  t8_stack_cleanup(&stack);
  return rv;
}

