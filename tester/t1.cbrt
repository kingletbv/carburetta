/* Copyright 2020-2023 Kinglet B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <stdlib.h>

%scanner%
%prefix t1_

INTEGER: [0-9]+ { $$ = atoi($text); }

: [\ \n]+; /* skip spaces and newlines */
PLUS: \+; 
MINUS: \-;
ASTERISK: \*;
SLASH: /; 
PAR_OPEN: \(; 
PAR_CLOSE: \);

%token PLUS MINUS ASTERISK SLASH PAR_OPEN PAR_CLOSE INTEGER
%nt grammar expr term factor value

%grammar%

%type grammar expr term factor value INTEGER: int
%constructor $$ = 0;
%destructor /* destructing */ $$ = 0;

%common_type int
%destructor /* destructing common */ $$ = 0;

%params int *final_result

grammar: expr {
  *final_result = $0;
}

expr: term                      { $$ = $0; }
expr: expr PLUS term            { $$ = $0 + $2; }
expr: expr MINUS term           { $$ = $0 - $2; }
  
term: factor                    { $$ = $0; }
term: term ASTERISK factor      { $$ = $0 * $2; }
term: term SLASH factor         { $$ = $0 / $2; }
  
factor: value                   { $$ = $0; }
factor: MINUS factor            { $$ = -$1; }
factor: PAR_OPEN expr PAR_CLOSE { $$ = $1; }

value: INTEGER                  { $$ = $0; }

value: error                    { $$ = 0; }
 
%%

int t1(void) {
  struct t1_stack stack;
  t1_stack_init(&stack);
  const char sum[] = "1+2*-3";
  t1_set_input(&stack, sum, sizeof(sum)-1, 1);
  int r;
  int final_result;
  r = t1_scan(&stack, &final_result);

  t1_stack_cleanup(&stack);

  if (r != _T1_FINISH) return -1;
  if (final_result != -5) return -1;

  return 0;
}
