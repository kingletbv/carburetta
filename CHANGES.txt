0.8.8 - 2023-04-21

- critical fixes relative to 0.8.6 and unit/regression testing to help 
  prevent such regressions in the future.

- unicode support inside character sets [\u{0}-\u{0x10FFFF}] for instance.

- support for unicode categories as per unicode annex 44 section 5.7.1.
  Unicode categories can be specified as both \p{Letter} (matches only
  letters) and \P{Letter} (matches anything but letters).

- Note that the default is still raw encoding, pass the --x-utf8 flag to
  carburetta to enable utf-8 mode.

0.8.6 - 2023-02-27

- substantial fixes relative to 0.8.4 ; users are encouraged to upgrade if
  not on 0.8.5 already.

- build issues under linux (missing limits.h)

- regular expression use of "." operator (the any character),
  now spans the full unicode range, excluding only newline \xA,
  carriage return \xD, NEXT LINE (NEL) \x85, and LINE SEPARATOR (LS) 
  \x2028. Otherwise any character from \x00 to \x10FFFF is matched.

- $is_mode(), allows checking the current scanner mode from within a 
  pattern action.

- <prefix>mode(), returns the current scanner mode to calling code.

- -x--utf8 - enables utf8 mode for the scanner. This is an experimental
  function that enables reading UTF-8 as input. Note that, while the
  core lexing engine can handle UTF-8, the regular expression parser
  is still missing substantial features (so, for instance, while a
  unicode literal like \u2028 can be used in a pattern, it cannot be
  used inside a character class, e.g. [\u2028] is not yet valid.).
  Eventually the intent is for utf8 mode to be the default and a raw,
  byte oriented, mode to be the flag selectable mode.


0.8.4 - 2021-04-09

- inireader example - reads .ini files using Carburetta in a scanner-only
  fashion. Demonstrates  how to build a  library-like  encapsulation of a
  carburetta  scanner/parser where  the user-code  retains control of the 
  flow.

- the template_scan example, showing how to use only the scanner section,
  without a grammar section. The  example takes input and substitutes the
  django like escaped fields like {{ this }} for files passed by argument
  like "--this file".

- fix: <prefix>scan() header prototype was broken if no additional params
  were passed in.

- fix: if, for whatever  reason, the input has  no epilogue section, both
  the scanner and  grammar sections should still  complete their parsing.
  (I.e. know  they've reached the  end of their inputs.)  Previously, the
  last line / directive / production could be ignored.

0.8.2 - 2021-04-06

- $chg_term() -- allows  changing the  terminal currently  matched in the
  scanner prior to that matched terminal entering the parser.
  This is a fairly advanced  feature that can  be hazardous, nevertheless
  some languages really need it (C).

- $set_mode() -- allows setting the current  scanner mode using a special
  identifier from inside a pattern  action. This avoids the need of using
  prefixes (for  both the  <prefix>set_mode  function and  its M_<PREFIX>
  constants.

- Better error location management, in particular when the error does not
  have any input associated with it (eg. for instance, "unexpected end of
  input" on any of the sections, has no associated text and yet can occur
  frequently if, e.g. a brace is mismatched.)

- Scannerless generation fix; previously had trouble generating without a 
  scanner but this is a supported method.

- Minor cleanups in code and NOTICE file.


0.8.0 - 2021-03-22 - Initial Release.

