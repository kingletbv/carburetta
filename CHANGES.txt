0.8.12 - 2023-06-02

- `%class` directive
  The `%class` directive wraps up a few C++ features into a single directive
  that is much more friendly for newcomers. It is a shorthand for the
  `%type`, `%raii_constructor`, `%destructor` and `%move` directives in the
  common scenario where `%type` is used to specify a C++ class.
  Please see the manual at https://carburetta.com/manual.html for details.

- `%move` directive
  `%move` is to be used alongside %constructor and %destructor directives, and
  describes how to move the datatype from $0 to $$.
  The `%move` directive while common for both C and C++, allows better support 
  for C++ classes in particular. If no `%move` directive is specified for a type, 
  then a `memcpy` is performed.
  Please see the manual at https://carburetta.com/manual.html for details.

- preserve whitespace in types, this fixes a problem with C++ where
  `std::int64_t` would be generated as `std : : int64_t` (note the
  spaces) because Carburetta internally did not recognize `::` as
  one token. This is now fixed; no spaces are generated in types anymore,
  so while `::` is still not a token for Carburetta internally, it
  no longer injects spaces.

- The new `%move` directive requires constructors and destructors to
  be called far more religiously than before. This is a good thing,
  but may require existing C code to have to use `%move` where it 
  could rely 

- add t9 C++ tracing failing constructor cleanup test
  This tests that whenever any constructor fail at whatever moment (via `throw`
  or early `return`,) that all the destructors are still called correctly.

- add t10 C++ tracing failing move cleanup test
  This is like t9, but for the `%move` directive; which is also allowed to
  fail at any moment.
  Note that no corresponding test exists for `%destructor` because it is
  never allowed to fail.

- add t11 C++ tracing failing constructor carrying data
  This is like t9 but the test-case has symbols carrying data.

- odd patch levels (e.g. 0.8.11 or the soon to be 0.8.13, but not 0.8.12) are
  development versions, the commandline version information now reflects this.

- Manual updated to 0.8.12, see https://carburetta.com/manual.html for details.

0.8.10 - 2023-05-04

- bring C++ back up from regressions - please be careful to read
  about the limitations in the manual.

- add t8 C++ simple calculator test case to unit/regression tests

- added GNU style --version and --help flags

- clear warnings across MSVC, GCC and Clang on C and C++.

- various important fixes.

- Flag --x-utf8 no longer generates the raw scanner table, the latter
  may be quite substantial and is not used (by definition) when specifying
  --x-utf8. This can be a substantial space savings.

- Manual (carburetta.com/manual.html) updated for 0.8.10, including the
  innards of utf8 operation which was previously missing.

- In memoriam https://en.wikipedia.org/wiki/Remembrance_of_the_Dead

0.8.8 - 2023-04-21

- critical fixes relative to 0.8.6 and unit/regression testing to help 
  prevent such regressions in the future.

- unicode support inside character sets [\u{0}-\u{0x10FFFF}] for instance.

- support for unicode categories as per unicode annex 44 section 5.7.1.
  Unicode categories can be specified as both \p{Letter} (matches only
  letters) and \P{Letter} (matches anything but letters).

- Note that the default is still raw encoding, pass the --x-utf8 flag to
  carburetta to enable utf-8 mode.

0.8.6 - 2023-02-27

- substantial fixes relative to 0.8.4 ; users are encouraged to upgrade if
  not on 0.8.5 already.

- build issues under linux (missing limits.h)

- regular expression use of "." operator (the any character),
  now spans the full unicode range, excluding only newline \xA,
  carriage return \xD, NEXT LINE (NEL) \x85, and LINE SEPARATOR (LS) 
  \x2028. Otherwise any character from \x00 to \x10FFFF is matched.

- $is_mode(), allows checking the current scanner mode from within a 
  pattern action.

- <prefix>mode(), returns the current scanner mode to calling code.

- -x--utf8 - enables utf8 mode for the scanner. This is an experimental
  function that enables reading UTF-8 as input. Note that, while the
  core lexing engine can handle UTF-8, the regular expression parser
  is still missing substantial features (so, for instance, while a
  unicode literal like \u2028 can be used in a pattern, it cannot be
  used inside a character class, e.g. [\u2028] is not yet valid.).
  Eventually the intent is for utf8 mode to be the default and a raw,
  byte oriented, mode to be the flag selectable mode.


0.8.4 - 2021-04-09

- inireader example - reads .ini files using Carburetta in a scanner-only
  fashion. Demonstrates  how to build a  library-like  encapsulation of a
  carburetta  scanner/parser where  the user-code  retains control of the 
  flow.

- the template_scan example, showing how to use only the scanner section,
  without a grammar section. The  example takes input and substitutes the
  django like escaped fields like {{ this }} for files passed by argument
  like "--this file".

- fix: <prefix>scan() header prototype was broken if no additional params
  were passed in.

- fix: if, for whatever  reason, the input has  no epilogue section, both
  the scanner and  grammar sections should still  complete their parsing.
  (I.e. know  they've reached the  end of their inputs.)  Previously, the
  last line / directive / production could be ignored.

0.8.2 - 2021-04-06

- $chg_term() -- allows  changing the  terminal currently  matched in the
  scanner prior to that matched terminal entering the parser.
  This is a fairly advanced  feature that can  be hazardous, nevertheless
  some languages really need it (C).

- $set_mode() -- allows setting the current  scanner mode using a special
  identifier from inside a pattern  action. This avoids the need of using
  prefixes (for  both the  <prefix>set_mode  function and  its M_<PREFIX>
  constants.

- Better error location management, in particular when the error does not
  have any input associated with it (eg. for instance, "unexpected end of
  input" on any of the sections, has no associated text and yet can occur
  frequently if, e.g. a brace is mismatched.)

- Scannerless generation fix; previously had trouble generating without a 
  scanner but this is a supported method.

- Minor cleanups in code and NOTICE file.


0.8.0 - 2021-03-22 - Initial Release.

