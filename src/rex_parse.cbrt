#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <ctype.h>

struct rex_nfa; 
#include "rex_parse.h"
#include "rex.h"

%scanner%

%prefix rex_

%token PAR_OPEN PAR_CLOSE SQBRACE_OPEN SQBRACE_CLOSE CUBRACE_OPEN CUBRACE_CLOSE
%token DOT DOLLAR CARET DASH BAR ASTERISK PLUS QUESTION_MARK
%token RESERVED_REGEX_CHAR SEMICOLON CHAR WHITESPACE
%token START_OF_INPUT_ESC END_OF_INPUT_ESC

%nt regex exp term elm sym range range-elm

%params struct rex_nfa *nfa, size_t *pstart, size_t *pend


%type exp term elm sym: struct { \
  size_t initial_; \
  size_t final_; \
}

%type CHAR: uint32_t

PAR_OPEN: \(;
PAR_CLOSE: \);
SQBRACE_OPEN: \[;
SQBRACE_CLOSE: \];
DOT: \.;
DOLLAR: \$; /* end of line */
CARET: \^;  /* start of line */
START_OF_INPUT_ESC: \\A; /* start of input */
END_OF_INPUT_ESC: \\Z; /* end of input */
DASH: \-;
BAR: \|;
ASTERISK: \*;
PLUS: \+;
QUESTION_MARK: \?;
CUBRACE_OPEN: \{;
CUBRACE_CLOSE: \};
RESERVED_REGEX_CHAR: \, | \:;
SEMICOLON: \;;
CHAR: \\a { $$ = '\a'; }
CHAR: \\b { $$ = '\b'; }
CHAR: \\f { $$ = '\f'; }
CHAR: \\n { $$ = '\n'; }
CHAR: \\r { $$ = '\r'; }
CHAR: \\t { $$ = '\t'; }
CHAR: \\v { $$ = '\v'; }
CHAR: \\[\{\}\[\]\(\)\,\.\^\$\*\|\?\+\:\;\-\'\"\ ] { $$ = (uint32_t)$text[1]; }

%%
static uint32_t hex_to_int(const char *txt, size_t len) {
  size_t digit;
  uint32_t val = 0;
  for (digit = 0; digit < len; ++digit) {
    if ((txt[digit] >= '0') && (txt[digit] <= '9')) {
      val = (val << 4) + (txt[digit] - '0');
    }
    else if ((txt[digit] >= 'a') && (txt[digit] <= 'f')) {
      val = (val << 4) + (txt[digit] - 'a' + 0xA);
    }
    else {
      val = (val << 4) + (txt[digit] - 'A' + 0xA);
    }
  }
  return val;
}
%%
CHAR: \\x[0-9a-fA-F] { $$ = hex_to_int($text + 1, 1); }
CHAR: \\x[0-9a-fA-F][0-9a-fA-F] { $$ = hex_to_int($text + 1, 2); }

%%
static uint32_t oct_to_int(const char *txt, size_t len) {
  size_t digit;
  uint32_t val = 0;
  for (digit = 0; digit < len; ++digit) {
    val = (val << 3) + (txt[digit] - '0');
  }
  return val;
}
%%
CHAR: \\[0-7] { $$ = oct_to_int($text + 1, 1); }
CHAR: \\[0-7][0-7] { $$ = oct_to_int($text + 1, 2); }
CHAR: \\[0-7][0-7][0-7] { $$ = oct_to_int($text + 1, 3); }

WHITESPACE: [\ \x9\xb\xc\xd\r\n]+;
CHAR: [\x20-\x7e] { $$ = $text[0]; }

%grammar%

regex: exp {
  *pstart = $0.initial_;
  *pend = $0.final_;
}

exp: term { 
  $$ = $0; 
}

exp: exp BAR term {
  size_t i, f;
  i = rex_nfa_make_node(nfa);
  f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, i, $0.initial_);
  rex_nfa_make_empty_trans(nfa, i, $2.initial_);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  rex_nfa_make_empty_trans(nfa, $2.final_, f);
  $$.initial_ = i;
  $$.final_ = f;
}

term: {
  $$.initial_ = rex_nfa_make_node(nfa);
  $$.final_ = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, $$.initial_, $$.final_);
}

term: term elm {
  $$.initial_ = $0.initial_;
  $$.final_ = $1.final_;
  rex_nfa_make_empty_trans(nfa, $0.final_, $1.initial_);
}

elm: sym {
  $$ = $0;
}

elm: sym ASTERISK {
  size_t i, f;
  i = rex_nfa_make_node(nfa);
  f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, i, f);
  rex_nfa_make_empty_trans(nfa, $0.final_, $0.initial_);
  rex_nfa_make_empty_trans(nfa, i, $0.initial_);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  $$.initial_ = i;
  $$.final_ = f;
}

elm: sym PLUS {
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  rex_nfa_make_empty_trans(nfa, $0.final_, $0.initial_);
  $$.initial_ = $0.initial_;
  $$.final_ = f;
}

elm: sym QUESTION_MARK {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, i, f);
  rex_nfa_make_empty_trans(nfa, i, $0.initial_);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: CHAR {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_trans(nfa, i, f, $0);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: DOT {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  uint32_t n;
  for (n = 0; n < 256; ++n) {
    if (n != 0xA) {
      rex_nfa_make_trans(nfa, i, f, n);
    }
  }
  
  $$.initial_ = i;
  $$.final_ = f;
}

sym: CARET {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_START_OF_LINE);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: DOLLAR {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_END_OF_LINE);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: START_OF_INPUT_ESC {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_START_OF_INPUT);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: END_OF_INPUT_ESC {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_END_OF_INPUT);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: PAR_OPEN exp PAR_CLOSE { $$ = $1; }

%%

static void make_bitmap_set_trans(struct rex_nfa *nfa, size_t from, size_t to, uint64_t bitmap[4]) {
  uint32_t v;
  /* Create a transition that matches each the character corresponding to each bit set in bitmap */
  for (v = 0; v < 256;) {
    uint32_t set_range_begin = v;
    while ((v < 256) && (bitmap[v >> 6] & (((uint64_t)1) << (v & 0x3F)))) {
      v++;
    }
    uint32_t set_range_end = v;
    if (set_range_begin != set_range_end) {
      rex_nfa_make_ranged_trans(nfa, from, to, set_range_begin, set_range_end - 1);
    }
    while ((v < 256) && !(bitmap[v >> 6] & (((uint64_t)1) << (v & 0x3F)))) {
      v++;
    }
  }
}

%%

%type range range-elm: uint64_t $[4]

sym: SQBRACE_OPEN range SQBRACE_CLOSE {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  make_bitmap_set_trans(nfa, i, f, $1);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: SQBRACE_OPEN CARET range SQBRACE_CLOSE {
  size_t n;
  for (n = 0; n < 4; ++n) {
    $2[n] = ~$2[n];
  }
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  make_bitmap_set_trans(nfa, i, f, $2);
  $$.initial_ = i;
  $$.final_ = f;
}

range: range range-elm {
  size_t n;
  for (n = 0; n < 4; ++n) {
    $$[n] = $0[n] | $1[n];
  }
}

range: range-elm {
  size_t n;
  for (n = 0; n < 4; ++n) {
    $$[n] = $0[n];
  }
}

range-elm: CHAR {
  size_t n;
  for (n = 0; n < 4; ++n) {
    $$[n] = 0;
  }
  $$[$0 >> 6] |= (((uint64_t)1) << ($0 & 0x3F));
}

range-elm: CHAR DASH CHAR {
  size_t n;
  for (n = 0; n < 4; ++n) {
    $$[n] = 0;
  }
  uint32_t v;
  uint32_t first = ($0 < $2) ? $0 : $2;
  uint32_t last = ($0 > $2) ? $0 : $2;
  for (v = first; v <= last; ++v) {
    $$[v >> 6] |= (((uint64_t)1) << (v & 0x3F));
  }
}

%%

