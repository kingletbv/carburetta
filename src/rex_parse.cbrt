/* Copyright 2020-2025 Kinglet B.V.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <ctype.h>

struct rex_nfa; 
#include "rex_parse.h"
#include "rex.h"
#include "rex_set_range.h"
#include "uc_cat_ranges.h"

%scanner%

%prefix rex_

%token PAR_OPEN PAR_CLOSE SQBRACE_OPEN SQBRACE_CLOSE CUBRACE_OPEN CUBRACE_CLOSE
%token DOT DOLLAR CARET DASH BAR ASTERISK PLUS QUESTION_MARK
%token RESERVED_REGEX_CHAR SEMICOLON CHAR CATEGORY WHITESPACE
%token START_OF_INPUT_ESC END_OF_INPUT_ESC

%nt regex exp term elm sym range range-elm

%params struct rex_nfa *nfa, size_t *pstart, size_t *pend

%type exp term elm sym: struct { \
  size_t initial_; \
  size_t final_; \
}

%type CHAR: uint32_t

%type CATEGORY: struct { \
  int is_inverted_; \
  size_t first_; \
  size_t last_; \
}

PAR_OPEN: \(;
PAR_CLOSE: \);
SQBRACE_OPEN: \[;
SQBRACE_CLOSE: \];
DOT: \.;
DOLLAR: \$; /* end of line */
CARET: \^;  /* start of line */
START_OF_INPUT_ESC: \\A; /* start of input */
END_OF_INPUT_ESC: \\Z; /* end of input */
DASH: \-;
BAR: \|;
ASTERISK: \*;
PLUS: \+;
QUESTION_MARK: \?;
CUBRACE_OPEN: \{;
CUBRACE_CLOSE: \};
RESERVED_REGEX_CHAR: \, | \:;
SEMICOLON: \;;
CHAR: \\a { $$ = '\a'; }
CHAR: \\b { $$ = '\b'; }
CHAR: \\f { $$ = '\f'; }
CHAR: \\n { $$ = '\n'; }
CHAR: \\r { $$ = '\r'; }
CHAR: \\t { $$ = '\t'; }
CHAR: \\v { $$ = '\v'; }
CHAR: \\[\{\}\[\]\(\)\,\.\^\$\*\|\?\+\:\;\-\'\"\ \\] { $$ = (uint32_t)$text[1]; }

%%
static uint32_t hex_to_int(const char *txt, size_t len) {
  size_t digit;
  uint32_t val = 0;
  for (digit = 0; digit < len; ++digit) {
    if ((txt[digit] >= '0') && (txt[digit] <= '9')) {
      val = (val << 4) + (txt[digit] - '0');
    }
    else if ((txt[digit] >= 'a') && (txt[digit] <= 'f')) {
      val = (val << 4) + (txt[digit] - 'a' + 0xA);
    }
    else {
      val = (val << 4) + (txt[digit] - 'A' + 0xA);
    }
  }
  return val;
}
%%
CHAR: \\x[0-9a-fA-F] { $$ = hex_to_int($text + 2, 1); }
CHAR: \\x[0-9a-fA-F][0-9a-fA-F] { $$ = hex_to_int($text + 2, 2); }

CHAR: \\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F] { $$ = hex_to_int($text + 2, 4); }
CHAR: \\u\{[0-9a-fA-F]+\} { $$ = hex_to_int($text + 3, $len - 4); }

%%
static uint32_t oct_to_int(const char *txt, size_t len) {
  size_t digit;
  uint32_t val = 0;
  for (digit = 0; digit < len; ++digit) {
    val = (val << 3) + (txt[digit] - '0');
  }
  return val;
}
%%
CHAR: \\[0-7] { $$ = oct_to_int($text + 1, 1); }
CHAR: \\[0-7][0-7] { $$ = oct_to_int($text + 1, 2); }
CHAR: \\[0-7][0-7][0-7] { $$ = oct_to_int($text + 1, 3); }

CATEGORY: \\p\{[a-zA-Z_][0-9a-zA-Z_]*\} { 
  size_t first, last;
  if (!uc_cat_ranges_resolve_codepoint_category($text + 3, $len - 4, &first, &last)) {
    /* Could not find category */
    nfa->failed_ = _REX_SYNTAX_ERROR;
    return _REX_SYNTAX_ERROR;
  }
  $$.is_inverted_ = 0;
  $$.first_ = first;
  $$.last_ = last;
}

CATEGORY: \\P\{[a-zA-Z_][0-9a-zA-Z_]*\} {
  size_t first, last;
  if (!uc_cat_ranges_resolve_codepoint_category($text + 3, $len - 4, &first, &last)) {
    /* Could not find category */
    nfa->failed_ = _REX_SYNTAX_ERROR;
    return _REX_SYNTAX_ERROR;
  }
  $$.is_inverted_ = 1; /* Capital P means inverted */
  $$.first_ = first;
  $$.last_ = last;
}

WHITESPACE: [\ \x9\xb\xc\xd\r\n]+;
CHAR: [\x20-\x7e] { $$ = $text[0]; }

%grammar%

regex: exp {
  *pstart = $0.initial_;
  *pend = $0.final_;
}

exp: term { 
  $$ = $0; 
}

exp: exp BAR term {
  size_t i, f;
  i = rex_nfa_make_node(nfa);
  f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, i, $0.initial_);
  rex_nfa_make_empty_trans(nfa, i, $2.initial_);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  rex_nfa_make_empty_trans(nfa, $2.final_, f);
  $$.initial_ = i;
  $$.final_ = f;
}

term: {
  $$.initial_ = rex_nfa_make_node(nfa);
  $$.final_ = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, $$.initial_, $$.final_);
}

term: term elm {
  $$.initial_ = $0.initial_;
  $$.final_ = $1.final_;
  rex_nfa_make_empty_trans(nfa, $0.final_, $1.initial_);
}

elm: sym {
  $$ = $0;
}

elm: sym ASTERISK {
  size_t i, f;
  i = rex_nfa_make_node(nfa);
  f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, i, f);
  rex_nfa_make_empty_trans(nfa, $0.final_, $0.initial_);
  rex_nfa_make_empty_trans(nfa, i, $0.initial_);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  $$.initial_ = i;
  $$.final_ = f;
}

elm: sym PLUS {
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  rex_nfa_make_empty_trans(nfa, $0.final_, $0.initial_);
  $$.initial_ = $0.initial_;
  $$.final_ = f;
}

elm: sym QUESTION_MARK {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_empty_trans(nfa, i, f);
  rex_nfa_make_empty_trans(nfa, i, $0.initial_);
  rex_nfa_make_empty_trans(nfa, $0.final_, f);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: CHAR {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_trans(nfa, i, f, $0);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: CATEGORY {
  struct rex_set_range range;
  rex_set_range_init(&range);
  if (rex_set_range_unicode(&range, $0.first_, $0.last_, $0.is_inverted_)) {
    rex_set_range_cleanup(&range);
    nfa->failed_ = _REX_NO_MEMORY;
    return _REX_NO_MEMORY;
  }

  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  size_t n;
  for (n = 0; n < range.num_intervals_; ++n) {
    rex_nfa_make_ranged_trans(nfa, i, f, range.intervals_[n].from_, range.intervals_[n].to_);
  }
  $$.initial_ = i;
  $$.final_ = f;
}

sym: DOT {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_ranged_trans(nfa, i, f, 0, 0x9);
  /* omit 0xA LF */
  rex_nfa_make_ranged_trans(nfa, i, f, 0xB, 0xC);
  /* omit 0xD CR */
  rex_nfa_make_ranged_trans(nfa, i, f, 0xE, 0x84);
  /* omit 0x85 NEL */
  rex_nfa_make_ranged_trans(nfa, i, f, 0x86, 0x2027);
  /* omit 0x2028 Line Separator */
  /* omit 0x2029 Paragraph Separator */
  rex_nfa_make_ranged_trans(nfa, i, f, 0x2029, 0x10FFFF);
  
  $$.initial_ = i;
  $$.final_ = f;
}

sym: CARET {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_START_OF_LINE);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: DOLLAR {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_END_OF_LINE);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: START_OF_INPUT_ESC {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_START_OF_INPUT);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: END_OF_INPUT_ESC {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  rex_nfa_make_anchor_trans(nfa, i, f, REX_ANCHOR_END_OF_INPUT);
  $$.initial_ = i;
  $$.final_ = f;
}

sym: PAR_OPEN exp PAR_CLOSE { $$ = $1; }

%type range range-elm: struct rex_set_range 
%constructor rex_set_range_init(&$$);
%destructor rex_set_range_cleanup(&$$);
%move rex_set_range_swap(&$$, &$0);

sym: SQBRACE_OPEN range SQBRACE_CLOSE {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  size_t n;
  for (n = 0; n < $1.num_intervals_; ++n) {
    rex_nfa_make_ranged_trans(nfa, i, f, $1.intervals_[n].from_, $1.intervals_[n].to_);
  }
  $$.initial_ = i;
  $$.final_ = f;
}

sym: SQBRACE_OPEN CARET range SQBRACE_CLOSE {
  size_t i = rex_nfa_make_node(nfa);
  size_t f = rex_nfa_make_node(nfa);
  size_t n;
  if (rex_set_range_unicode_invert(&$2)) {
    nfa->failed_ = _REX_NO_MEMORY;
    return _REX_NO_MEMORY;
  }
  for (n = 0; n < $2.num_intervals_; ++n) {
    rex_nfa_make_ranged_trans(nfa, i, f, (uint32_t)$2.intervals_[n].from_, (uint32_t)$2.intervals_[n].to_);
  }

  $$.initial_ = i;
  $$.final_ = f;
}

range: range range-elm {
  rex_set_range_swap(&$$, &$0);
  if (rex_set_range_add_range(&$$, &$1)) {
    nfa->failed_ = _REX_NO_MEMORY;
    return _REX_NO_MEMORY;
  }
}

range: range-elm {
  rex_set_range_swap(&$$, &$0);
}

range-elm: CHAR {
  if (rex_set_range_add(&$$, (int)$0, (int)$0)) {
    nfa->failed_ = _REX_NO_MEMORY;
    return _REX_NO_MEMORY;
  }
}

range-elm: CATEGORY {
  if (rex_set_range_unicode(&$$, $0.first_, $0.last_, $0.is_inverted_)) {
    nfa->failed_ = _REX_NO_MEMORY;
    return _REX_NO_MEMORY;
  }
}

range-elm: CHAR DASH CHAR {
  int from, to;
  if ($0 < $2) {
    from = (int)$0;
    to = (int)$2;
  } else {
    from = (int)$2;
    to = (int)$0;
  }
  if (rex_set_range_add(&$$, from, to)) {
    nfa->failed_ = _REX_NO_MEMORY;
    return _REX_NO_MEMORY;
  }
}

%%

