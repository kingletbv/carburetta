/* Copyright 2020-2024 Kinglet B.V.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDIO_H_INCLUDED
#define STDIO_H_INCLUDED
#include <stdio.h>
#endif

#ifndef STDLIB_H_INCLUDED
#define STDLIB_H_INCLUDED
#include <stdlib.h>
#endif

#ifndef STDINT_H_INCLUDED
#define STDINT_H_INCLUDED
#include <stdint.h>
#endif

#ifndef STRING_H_INCLUDED
#define STRING_H_INCLUDED
#include <string.h>
#endif

#ifndef ERRNO_H_INCLUDED
#define ERNNO_H_INCLUDED
#include <errno.h>
#endif

#ifndef ASSERT_H_INCLUDED
#define ASSERT_H_INCLUDED
#include <assert.h>
#endif

#ifndef TOKENIZER_H_INCLUDED
#define TOKENIZER_H_INCLUDED
#include "tokenizer.h"
#endif

#ifndef XLTS_H_INCLUDED
#define XLTS_H_INCLUDED
#include "xlts.h"
#endif

#ifndef TOKENS_H_INCLUDED
#define TOKENS_H_INCLUDED
#include "tokens.h"
#endif

#ifndef REPORT_ERROR_H_INCLUDED
#define REPORT_ERROR_H_INCLUDED
#include "report_error.h"
#endif

#ifndef PRD_GRAM_H_INCLUDED
#define PRD_GRAM_H_INCLUDED
#include "prd_gram.h"
#endif

#ifndef SYMBOL_H_INCLUDED
#define SYMBOL_H_INCLUDED
#include "symbol.h"
#endif

#ifndef REGEX_GRAMMAR_H_INCLUDED
#define REGEX_GRAMMAR_H_INCLUDED
#include "regex_grammar.h"
#endif

#ifndef SNIPPET_H_INCLUDED
#define SNIPPET_H_INCLUDED
#include "snippet.h"
#endif

%prefix rxg_
%params struct prd_grammar *g, struct tkr_tokenizer *tkr, struct symbol_table *st, int char_value
%locals int r; \
        struct prd_pattern *pat;

%token CHAR IDENT PAR_OPEN PAR_CLOSE CUR_OPEN CUR_CLOSE COLON SEMICOLON SQ_OPEN SQ_CLOSE DOT DOLLAR CARET DASH BAR ASTERISK PLUS QUESTION_MARK TOKEN WHITESPACE
%token START_OF_INPUT_ESC END_OF_INPUT_ESC LESS_THAN GREATER_THAN COMMA CATEGORY
%nt exp term elm sym range range-elm

%nt grammar pattern action-sequence stmt-action start-regex end-regex start-c-tokenizer end-c-tokenizer accept-whitespace

/* pattern type holds the index of the pattern in g->patterns_ */
%type pattern: size_t
%constructor $$ = SIZE_MAX;

%common_type struct snippet
%constructor snippet_init(&$);
%destructor snippet_cleanup(&$);
%move snippet_move(&$$, &$0);
%token_action snippet_append_tkr(&$, tkr);

%on_finish         return PRD_SUCCESS;
%on_syntax_error   re_error_tkr(tkr, "Syntax error"); return PRD_SYNTAX_ERROR;
%on_alloc_error    re_error_nowhere("Error: no memory"); return PRD_INTERNAL_ERROR;
%on_internal_error re_error_nowhere("Error: internal error\n"); return PRD_INTERNAL_ERROR;
%on_next_token     return PRD_NEXT;

%on_syntax_error /* Syntax error */ \
  if (sym != RXG_INPUT_END) {\
    re_error_tkr(tkr, "Syntax error \"%s\" not expected", tkr->xmatch_.translated_); \
  } \
  else { \
    re_error_tkr(tkr, "Syntax error: end of input not expected");   \
  } \
  return PRD_SYNTAX_ERROR;


%grammar%

%%
struct regex_mode_node {
  struct regex_mode_node *chain_;
  struct xlts name_;
};

struct regex_mode_list {
  struct regex_mode_node *modes_;
};

void regex_mode_list_init(struct regex_mode_list *rml) {
  if (!rml) return;
  rml->modes_ = NULL;
}

void regex_mode_list_cleanup(struct regex_mode_list *rml) {
  struct regex_mode_node *m = rml->modes_;
  struct regex_mode_node *next;
  if (m) {
    next = m->chain_;
    do {
      m = next;
      next = m->chain_;

      xlts_cleanup(&m->name_);

      free(m);
    } while (m != rml->modes_);
    rml->modes_ = NULL;
  }
}

int regex_mode_list_append_mode(struct regex_mode_list *rml, const struct snippet *mode_name) {
  struct regex_mode_node *m = (struct regex_mode_node *)malloc(sizeof(struct regex_mode_node));
  if (!m) {
    return PRD_INTERNAL_ERROR;
  }
  xlts_init(&m->name_);
  int r;
  r = snippet_append_to_xlts(&m->name_, mode_name);
  if (r) return PRD_INTERNAL_ERROR;
  if (rml->modes_) {
    m->chain_ = rml->modes_->chain_;
    rml->modes_->chain_ = m;
  }
  else {
    m->chain_ = m;
  }
  rml->modes_ = m;

  return PRD_SUCCESS;
}

void regex_mode_list_move(struct regex_mode_list *dst, struct regex_mode_list *src) {
  regex_mode_list_cleanup(dst);
  dst->modes_ = src->modes_;
  src->modes_ = NULL;
}

%%

grammar: ;
grammar: grammar pattern;
grammar: grammar mode-group;
grammar: grammar mode pattern {
  r = prd_grammar_check_mode_group_reserve(g);
  if (r) return r;
  struct prd_mode_group *mg = g->mode_groups_ + g->num_mode_groups_++;
  prd_mode_group_init(mg);
  struct regex_mode_node *m = $1.modes_;
  if (m) {
    do {
      m = m->chain_;

      r = prd_mode_group_check_mode_reserve(mg, &m->name_);
      if (r) return r;
      struct prd_mode *mgm = mg->modes_ + mg->num_modes_++;
      prd_mode_init(mgm);
      xlts_append(&mgm->id_, &m->name_);
    } while (m != $1.modes_);
  }
  if ($2 != SIZE_MAX) {
    /* Not a common action (which looks like a pattern but is only an action attribute.) */
    mg->pattern_start_index_ = $2;
    mg->pattern_end_index_ = $2 + 1;
  }
}

%nt mode mode-list mode-group pattern_list

%type mode mode-list: struct regex_mode_list
%constructor regex_mode_list_init(&$$);
%destructor regex_mode_list_cleanup(&$$);

mode: LESS_THAN mode-list GREATER_THAN { regex_mode_list_move(&$$, &$1); }

mode-list: IDENT {
  regex_mode_list_append_mode(&$$, &${0});
}
mode-list: mode-list COMMA IDENT  {
  regex_mode_list_move(&$$, &$0);
  regex_mode_list_append_mode(&$$, &${2});
}

mode-group: mode CUR_OPEN              CUR_CLOSE /* mode with no patterns, curious, but permitted. */ {
  r = prd_grammar_check_mode_group_reserve(g);
  if (r) return r;
  struct prd_mode_group *mg = g->mode_groups_ + g->num_mode_groups_++;
  prd_mode_group_init(mg);
  struct regex_mode_node *m = $0.modes_;
  if (m) {
    do {
      m = m->chain_;

      r = prd_mode_group_check_mode_reserve(mg, &m->name_);
      if (r) return r;
      struct prd_mode *mgm = mg->modes_ + mg->num_modes_++;
      prd_mode_init(mgm);
      xlts_append(&mgm->id_, &m->name_);
    } while (m != $0.modes_);
  }
}
mode-group: mode CUR_OPEN pattern-list CUR_CLOSE {
  r = prd_grammar_check_mode_group_reserve(g);
  if (r) return r;
  struct prd_mode_group *mg = g->mode_groups_ + g->num_mode_groups_++;
  prd_mode_group_init(mg);
  struct regex_mode_node *m = $0.modes_;
  if (m) {
    do {
      m = m->chain_;

      r = prd_mode_group_check_mode_reserve(mg, &m->name_);
      if (r) return r;
      struct prd_mode *mgm = mg->modes_ + mg->num_modes_++;
      prd_mode_init(mgm);
      xlts_append(&mgm->id_, &m->name_);
    } while (m != $0.modes_);
  }
  mg->pattern_start_index_ = $2.start_;
  mg->pattern_end_index_ = $2.end_;
}

/* Consecutive patterns get consecutive numbers; a pattern-list is therefore always a range */
%type pattern-list: struct { size_t start_, end_; }
%constructor $$.start_ = $$.end_ = SIZE_MAX;
pattern-list: pattern { 
  if ($0 != SIZE_MAX) {
    $$.start_ = $0; 
    $$.end_ = $0 + 1;
  }
}
pattern-list: pattern-list pattern { 
  if ($1 != SIZE_MAX) {
    if ($0.start_ != $0.end_) {
      $$ = $0;
      $$.end_ = $1 + 1;
    }
    else {
      $0.start_ = $1;
      $0.end_ = $1 + 1;
    }
  }
  else {
    $$ = $0;
  }
}


pattern: IDENT start-regex COLON exp end-regex SEMICOLON {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${3});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  $$ = g->num_patterns_;
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_to_xlts(&pat->term_.id_, &${0});
  if (r) return r;
  r = snippet_append_snippet(&pat->common_action_sequence_, &g->current_common_pattern_action_sequence_);
  if (r) return r;
}

pattern: IDENT start-regex COLON exp end-regex start-c-tokenizer accept-whitespace CUR_OPEN action-sequence end-c-tokenizer CUR_CLOSE {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${3});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  $$ = g->num_patterns_;
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_to_xlts(&pat->term_.id_, &${0});
  if (r) return r;
  r = snippet_append_snippet(&pat->action_sequence_, &${8});
  if (r) return r;
  r = snippet_append_snippet(&pat->common_action_sequence_, &g->current_common_pattern_action_sequence_);
  if (r) return r;
}
pattern: IDENT start-regex COLON exp end-regex start-c-tokenizer stmt-action end-c-tokenizer SEMICOLON {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${3});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  $$ = g->num_patterns_;
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_to_xlts(&pat->term_.id_, &${0});
  if (r) return r;
  r = snippet_append_snippet(&pat->action_sequence_, &${6});
  if (r) return r;
  /* Pop the '=' token from stmt-action as it is not part of the action sequence itself. */
  if (pat->action_sequence_.num_tokens_ && (pat->action_sequence_.tokens_[0].match_ == TOK_EQUALS)) {
    snippet_pop_first_token(&pat->action_sequence_);
  }
  r = snippet_append_snippet(&pat->common_action_sequence_, &g->current_common_pattern_action_sequence_);
  if (r) return r;
}

pattern: start-regex COLON exp end-regex SEMICOLON {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${2});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  $$ = g->num_patterns_;
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_snippet(&pat->common_action_sequence_, &g->current_common_pattern_action_sequence_);
  if (r) return r;
}

pattern: start-regex COLON exp end-regex start-c-tokenizer accept-whitespace CUR_OPEN action-sequence end-c-tokenizer CUR_CLOSE {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${2});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  $$ = g->num_patterns_;
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_snippet(&pat->action_sequence_, &${7});
  if (r) return r;
  r = snippet_append_snippet(&pat->common_action_sequence_, &g->current_common_pattern_action_sequence_);
  if (r) return r;
}
pattern: start-regex COLON exp end-regex start-c-tokenizer stmt-action end-c-tokenizer SEMICOLON {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${2});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  $$ = g->num_patterns_;
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_snippet(&pat->action_sequence_, &${5});
  if (r) return r;
  /* Pop the '=' token from stmt-action as it is not part of the action sequence itself. */
  if (pat->action_sequence_.num_tokens_ && (pat->action_sequence_.tokens_[0].match_ == TOK_EQUALS)) {
    snippet_pop_first_token(&pat->action_sequence_);
  }
  r = snippet_append_snippet(&pat->common_action_sequence_, &g->current_common_pattern_action_sequence_);
  if (r) return r;
}

pattern: DOLLAR COLON start-c-tokenizer accept-whitespace CUR_OPEN action-sequence end-c-tokenizer CUR_CLOSE {
  /* Analogous to regular pattern actions, except we're moving it into the grammar's
   * current common action sequence. */
  snippet_clear(&g->current_common_pattern_action_sequence_);

  /* If action-sequence is empty, then we'd like to preserve this empty-ness by making the common-action 
   * empty as well. This allows generating code to discover that there is no common-action */
  if (${5}.num_tokens_) {
    r = snippet_append_snippet(&g->current_common_pattern_action_sequence_, &${5});
    if (r) return r;
  }
}

$: {
  size_t n;
  for (n = 0; n < $len; ++n) {
    snippet_append_snippet(&$, &${n});
  }
}
exp: term;
exp: exp BAR term;

term: ;
term: term elm;

elm: sym;
elm: sym ASTERISK;
elm: sym PLUS;
elm: sym QUESTION_MARK;

sym: CHAR;
sym: DOT;
sym: CARET;
sym: DOLLAR;
sym: START_OF_INPUT_ESC;
sym: END_OF_INPUT_ESC;
sym: PAR_OPEN exp PAR_CLOSE;
sym: SQ_OPEN range SQ_CLOSE;
sym: SQ_OPEN CARET range SQ_CLOSE;
sym: CATEGORY;

range: range range-elm;
range: range-elm;

range-elm: CHAR;
range-elm: CATEGORY;
range-elm: CHAR DASH CHAR;

action-sequence: ;
action-sequence: action-sequence CHAR;
action-sequence: action-sequence CATEGORY;
action-sequence: action-sequence IDENT;
action-sequence: action-sequence COLON;
action-sequence: action-sequence SEMICOLON;
action-sequence: action-sequence SQ_OPEN;
action-sequence: action-sequence SQ_CLOSE;
action-sequence: action-sequence DOT;
action-sequence: action-sequence COMMA;
action-sequence: action-sequence LESS_THAN;
action-sequence: action-sequence GREATER_THAN;
action-sequence: action-sequence DOLLAR;
action-sequence: action-sequence CARET;
action-sequence: action-sequence DASH;
action-sequence: action-sequence BAR;
action-sequence: action-sequence ASTERISK;
action-sequence: action-sequence PLUS;
action-sequence: action-sequence QUESTION_MARK;
action-sequence: action-sequence TOKEN;
action-sequence: action-sequence WHITESPACE;
action-sequence: action-sequence PAR_OPEN action-sequence PAR_CLOSE;
action-sequence: action-sequence CUR_OPEN action-sequence CUR_CLOSE;


$:{}

start-regex: {
  tok_switch_to_regex(tkr);
}

end-regex: {
  tok_switch_to_nonterminal_idents(tkr);
}

start-c-tokenizer: {
  tok_switch_to_c_idents(tkr);
}
end-c-tokenizer: {
  g->accept_whitespace_ = 0; /* ignore whitespace */
  tok_switch_to_nonterminal_idents(tkr);
}

accept-whitespace: {
  g->accept_whitespace_ = 1;
}

%%

int rxg_parse_tkr(struct rxg_stack *stack, struct prd_grammar *g, struct tkr_tokenizer *tkr, int end_of_input, struct symbol_table *st) {
  int sym;
  char char_value = 0;

  if (!end_of_input) {
    if (!g->accept_whitespace_ && (tkr->best_match_variant_ == TOK_WHITESPACE)) {
      /* Eat whitespace */
      return PRD_NEXT;
    }
    token_type_t tkt = (token_type_t)tkr->best_match_action_;

    switch (tkt) {
    case TOK_IDENT: sym = RXG_IDENT; break;
    case TOK_PAR_OPEN: sym = RXG_PAR_OPEN; break;
    case TOK_PAR_CLOSE: sym = RXG_PAR_CLOSE; break;
    case TOK_CUBRACE_OPEN: sym = RXG_CUR_OPEN; break;
    case TOK_CUBRACE_CLOSE: sym = RXG_CUR_CLOSE; break;
    case TOK_COLON: sym = RXG_COLON; break;
    case TOK_SEMICOLON: sym = RXG_SEMICOLON; break;
    case TOK_SQBRACE_OPEN: sym = RXG_SQ_OPEN; break;
    case TOK_SQBRACE_CLOSE: sym = RXG_SQ_CLOSE; break;
    case TOK_DOT: sym = RXG_DOT; break;
    case TOK_DOLLAR: sym = RXG_DOLLAR; break;
    case TOK_CARET: sym = RXG_CARET; break;
    case TOK_MINUS: sym = RXG_DASH; break;
    case TOK_BAR: sym = RXG_BAR; break;
    case TOK_ASTERISK: sym = RXG_ASTERISK; break;
    case TOK_PLUS: sym = RXG_PLUS; break;
    case TOK_QUESTION_MARK: sym = RXG_QUESTION_MARK; break;
    case TOK_RESERVED_REGEX_CHAR: {
      return PRD_SYNTAX_ERROR;
    }
    case TOK_ESC_A: sym = RXG_CHAR; char_value = '\a'; break;
    case TOK_ESC_B: sym = RXG_CHAR; char_value = '\b'; break;
    case TOK_ESC_F: sym = RXG_CHAR; char_value = '\f'; break;
    case TOK_ESC_N: sym = RXG_CHAR; char_value = '\n'; break;
    case TOK_ESC_R: sym = RXG_CHAR; char_value = '\r'; break;
    case TOK_ESC_T: sym = RXG_CHAR; char_value = '\t'; break;
    case TOK_ESC_V: sym = RXG_CHAR; char_value = '\v'; break;
    case TOK_ESC_CHAR: {
      sym = RXG_CHAR; char_value = tkr->xmatch_.translated_[1]; break;
    }
    case TOK_ESC_HEX1: {
      sym = RXG_CHAR; 
      char c = tkr->xmatch_.translated_[2];
      if ((c >= '0') && (c <= '9')) char_value = c - '0';
      if ((c >= 'a') && (c <= 'f')) char_value = 0xA + c - 'a';
      if ((c >= 'A') && (c <= 'F')) char_value = 0xA + c - 'A';
      break;
    }
    case TOK_ESC_HEX2: {
      sym = RXG_CHAR; 
      char c = tkr->xmatch_.translated_[2];
      if ((c >= '0') && (c <= '9')) char_value = c - '0';
      if ((c >= 'a') && (c <= 'f')) char_value = 0xA + c - 'a';
      if ((c >= 'A') && (c <= 'F')) char_value = 0xA + c - 'A';
      c = tkr->xmatch_.translated_[3];
      if ((c >= '0') && (c <= '9')) char_value = (char_value << 4) + c - '0';
      if ((c >= 'a') && (c <= 'f')) char_value = (char_value << 4) + 0xA + c - 'a';
      if ((c >= 'A') && (c <= 'F')) char_value = (char_value << 4) + 0xA + c - 'A';
      break;
    }
    case TOK_ESC_OCT1: {
      sym = RXG_CHAR;
      char c = tkr->xmatch_.translated_[1];
      char_value = c - '0';
      break;
    }
    case TOK_ESC_OCT2: {
      sym = RXG_CHAR;
      char c = tkr->xmatch_.translated_[1];
      char_value = c - '0';
      c = tkr->xmatch_.translated_[2];
      char_value = (char_value << 3) + c - '0';
      break;
    }
    case TOK_ESC_OCT3: {
      sym = RXG_CHAR;
      char c = tkr->xmatch_.translated_[1];
      char_value = c - '0';
      c = tkr->xmatch_.translated_[2];
      char_value = (char_value << 3) + c - '0';
      c = tkr->xmatch_.translated_[3];
      char_value = (char_value << 3) + c - '0';
      break;
    }
    case TOK_ESC_UNI1: {
      sym = RXG_CHAR;
      int n = 3; /* position after "\u{" */
      char_value = 0;
      while (tkr->xmatch_.translated_[n] != '}') {
        char c = tkr->xmatch_.translated_[n++];
        if ((c >= '0') && (c <= '9')) char_value = (char_value << 4) + c - '0';
        if ((c >= 'a') && (c <= 'f')) char_value = (char_value << 4) + 0xA + c - 'a';
        if ((c >= 'A') && (c <= 'F')) char_value = (char_value << 4) + 0xA + c - 'A';
      }
      break;
    }
    case TOK_ESC_UNI2: {
      sym = RXG_CHAR;
      int n;
      char_value = 0;
      for (n = 2; n < 6; ++n) {
        char c = tkr->xmatch_.translated_[n];
        if ((c >= '0') && (c <= '9')) char_value = (char_value << 4) + c - '0';
        if ((c >= 'a') && (c <= 'f')) char_value = (char_value << 4) + 0xA + c - 'a';
        if ((c >= 'A') && (c <= 'F')) char_value = (char_value << 4) + 0xA + c - 'A';
      }
      break;
    }
    case TOK_REGULAR_CATEGORY: {
      sym = RXG_CATEGORY;
      break;
    }
    case TOK_INVERTED_CATEGORY: {
      sym = RXG_CATEGORY;
      break;
    }
    case TOK_ESC_INVALID_ESCAPE: {
      re_error_tkr(tkr, "Error, invalid escape \"\\%c\"", tkr->xmatch_.translated_[1]);
      return PRD_SYNTAX_ERROR;
    }
    case TOK_CHAR: {
      sym = RXG_CHAR;
      char_value = tkr->xmatch_.translated_[0];
      break;
    }
    case TOK_WHITESPACE: sym = RXG_WHITESPACE; break;
    case TOK_SPECIAL_IDENT_STR: 
      if (!strcmp("$", tkr_str(tkr))) {
        /* Single '$' is recognized as a dollar.. */
        sym = RXG_DOLLAR;
      }
      else {
        sym = RXG_TOKEN;
      }
      break;
    case TOK_ESC_START_OF_INPUT_ESC: sym = RXG_START_OF_INPUT_ESC; break;
    case TOK_ESC_END_OF_INPUT_ESC: sym = RXG_END_OF_INPUT_ESC; break;
    case TOK_LT: sym = RXG_LESS_THAN; break;
    case TOK_GT: sym = RXG_GREATER_THAN; break;
    case TOK_COMMA: sym = RXG_COMMA; break;
    default: {
      sym = RXG_TOKEN;
    }
    }
  }
  else {
    sym = RXG_INPUT_END;
  }

  return rxg_parse(stack, sym, g, tkr, st, char_value);
}

