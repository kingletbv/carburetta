/* Copyright 2020 Kinglet B.V.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http ://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef STDIO_H_INCLUDED
#define STDIO_H_INCLUDED
#include <stdio.h>
#endif

#ifndef STDLIB_H_INCLUDED
#define STDLIB_H_INCLUDED
#include <stdlib.h>
#endif

#ifndef STDINT_H_INCLUDED
#define STDINT_H_INCLUDED
#include <stdint.h>
#endif

#ifndef STRING_H_INCLUDED
#define STRING_H_INCLUDED
#include <string.h>
#endif

#ifndef ERRNO_H_INCLUDED
#define ERNNO_H_INCLUDED
#include <errno.h>
#endif

#ifndef ASSERT_H_INCLUDED
#define ASSERT_H_INCLUDED
#include <assert.h>
#endif

#ifndef TOKENIZER_H_INCLUDED
#define TOKENIZER_H_INCLUDED
#include "tokenizer.h"
#endif

#ifndef XLTS_H_INCLUDED
#define XLTS_H_INCLUDED
#include "xlts.h"
#endif

#ifndef TOKENS_H_INCLUDED
#define TOKENS_H_INCLUDED
#include "tokens.h"
#endif

#ifndef REPORT_ERROR_H_INCLUDED
#define REPORT_ERROR_H_INCLUDED
#include "report_error.h"
#endif

#ifndef REGEX_GRAMMAR_H_INCLUDED
#define REGEX_GRAMMAR_H_INCLUDED
#include "regex_grammar.h"
#endif

#ifndef PRD_GRAM_H_INCLUDED
#define PRD_GRAM_H_INCLUDED
#include "prd_gram.h"
#endif

#ifndef SNIPPET_H_INCLUDED
#define SNIPPET_H_INCLUDED
#include "snippet.h"
#endif

%prefix rxg_
%params struct prd_grammar *g, struct tkr_tokenizer *tkr, struct symbol_table *st, char char_value
%locals int r; \
        struct prd_pattern *pat;

%token CHAR IDENT PAR_OPEN PAR_CLOSE CUR_OPEN CUR_CLOSE COLON SEMICOLON SQ_OPEN SQ_CLOSE DOT DOLLAR CARET DASH BAR ASTERISK PLUS QUESTION_MARK TOKEN WHITESPACE
%nt exp term elm sym range range-elm

%nt grammar pattern action-sequence stmt-action start-regex end-regex start-c-tokenizer end-c-tokenizer accept-whitespace

%common_type struct snippet
%constructor snippet_init(&$);
%destructor snippet_cleanup(&$);

%token_action snippet_append_tkr(&$, tkr);

%on_success        return PRD_SUCCESS;
%on_syntax_error   re_error_tkr(tkr, "Syntax error"); return PRD_SYNTAX_ERROR;
%on_alloc_error    re_error_tkr(tkr, "Error: no memory"); return PRD_INTERNAL_ERROR;
%on_internal_error re_error_tkr(tkr, "Error: internal error\n"); return PRD_INTERNAL_ERROR;
%on_next_token     return PRD_NEXT;

%on_syntax_error /* Syntax error */ \
  if (sym != PRD_INPUT_END) {\
    re_error_tkr(tkr, "Syntax error \"%s\" not expected", tkr->xmatch_.translated_); \
  } \
  else { \
    re_error_tkr(tkr, "Syntax error: end of input not expected");   \
  } \
  return PRD_SYNTAX_ERROR;


%scanner%
WHITESPACE: /\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*/ {
  fprintf(stderr, "Imagine a sensible action here.\n");
}
//comment: x {
//}


//xy("/\\*([^\\*]|[\\r\\n]|(\\*+([^\\*/]|[\\r\\n])))*\\*/", TOK_C_STYLE_COMMENT, TOK_WHITESPACE)

%grammar%

grammar: ;
grammar: grammar pattern;

pattern: IDENT start-regex COLON exp end-regex SEMICOLON {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${3});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_to_xlts(&pat->term_.id_, &${0});
  if (r) return r;
}

pattern: IDENT start-regex COLON exp end-regex start-c-tokenizer accept-whitespace CUR_OPEN action-sequence end-c-tokenizer CUR_CLOSE {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${3});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_to_xlts(&pat->term_.id_, &${0});
  if (r) return r;
  r = snippet_append_snippet(&pat->action_sequence_, &${8});
  if (r) return r;
}
pattern: IDENT start-regex COLON exp end-regex start-c-tokenizer stmt-action end-c-tokenizer SEMICOLON {
  r = prd_grammar_check_pattern_reserve(g);
  if (r) return r;
  char *regex = snippet_dup_xlt(&${3});
  if (!regex) {
    return PRD_INTERNAL_ERROR;
  }
  pat = g->patterns_ + g->num_patterns_++;
  prd_pattern_init(pat);
  pat->regex_ = regex;
  r = snippet_append_to_xlts(&pat->term_.id_, &${0});
  if (r) return r;
  r = snippet_append_snippet(&pat->action_sequence_, &${6});
  if (r) return r;
  /* Pop the '=' token from stmt-action as it is not part of the action sequence itself. */
  if (pat->action_sequence_.num_tokens_ && (pat->action_sequence_.tokens_[0].match_ == TOK_EQUALS)) {
    snippet_pop_first_token(&pat->action_sequence_);
  }
}

$: {
  size_t n;
  for (n = 0; n < $len; ++n) {
    snippet_append_snippet(&$, &${n});
  }
}
exp: term;
exp: exp BAR term;

term: ;
term: term elm;

elm: sym;
elm: sym ASTERISK;
elm: sym PLUS;
elm: sym QUESTION_MARK;

sym: CHAR;
sym: DOT;
sym: CARET;
sym: DOLLAR;
sym: PAR_OPEN exp PAR_CLOSE;
sym: SQ_OPEN range SQ_CLOSE;
sym: SQ_OPEN CARET range SQ_CLOSE;

range: range range-elm;
range: range-elm;

range-elm: CHAR;
range-elm: CHAR DASH CHAR;

action-sequence: ;
action-sequence: action-sequence CHAR;
action-sequence: action-sequence IDENT;
action-sequence: action-sequence COLON;
action-sequence: action-sequence SEMICOLON;
action-sequence: action-sequence SQ_OPEN;
action-sequence: action-sequence SQ_CLOSE;
action-sequence: action-sequence DOT;
action-sequence: action-sequence DOLLAR;
action-sequence: action-sequence CARET;
action-sequence: action-sequence DASH;
action-sequence: action-sequence BAR;
action-sequence: action-sequence ASTERISK;
action-sequence: action-sequence PLUS;
action-sequence: action-sequence QUESTION_MARK;
action-sequence: action-sequence TOKEN;
action-sequence: action-sequence WHITESPACE;
action-sequence: action-sequence PAR_OPEN action-sequence PAR_CLOSE;
action-sequence: action-sequence CUR_OPEN action-sequence CUR_CLOSE;


$:{}

start-regex: {
  tok_switch_to_regex(tkr);
}

end-regex: {
  tok_switch_to_nonterminal_idents(tkr);
}

start-c-tokenizer: {
  tok_switch_to_c_idents(tkr);
}
end-c-tokenizer: {
  g->accept_whitespace_ = 0; /* ignore whitespace */
  tok_switch_to_nonterminal_idents(tkr);
}

accept-whitespace: {
  g->accept_whitespace_ = 1;
}

%%
#if 0
#define RXG_MATCH 1
#define RXG_OVERFLOW 2
#define RXG_NO_MEMORY 3
#define RXG_FEED_ME 4
#define RXG_END_OF_INPUT 5
#define RXG_SYNTAX_ERROR 6

static int rxg_append_match_buffer(struct rxg_stack *stack, const char *s, size_t len) {
  size_t size_needed = len;
  size_needed += stack->match_buffer_size_;
  if (size_needed < stack->match_buffer_size_) {
    return RXG_OVERFLOW;
  }
  if (size_needed == SIZE_MAX) {
    /* cannot fit null terminator */
    return RXG_OVERFLOW;
  }
  size_needed++; /* null terminator */
  if (size_needed < 128) {
    size_needed = 128;
  }
  if (size_needed > stack->match_buffer_size_allocated_) {
    /* intent of code: grow buffer size by powers of 2-1, unless our needs require more now. */
    size_t size_to_allocate = stack->match_buffer_size_allocated_ * 2 + 1;
    if (size_to_allocate <= stack->match_buffer_size_allocated_) {
      return RXG_OVERFLOW;
    }
    if (size_to_allocate < size_needed) {
      size_to_allocate = size_needed;
    }
    void *buf = realloc(stack->match_buffer_, size_to_allocate);
    if (!buf) {
      return RXG_NO_MEMORY;
    }
    stack->match_buffer_ = (char *)buf;
    stack->match_buffer_size_allocated_ = size_to_allocate;
  }

  memcpy(stack->match_buffer_ + stack->match_buffer_size_, s, len);
  stack->match_buffer_size_ += len;
  stack->match_buffer_[stack->match_buffer_size_] = '\0';
  return 0;
}

int rxg_scan(struct rxg_stack *stack, const char *input, size_t input_size, int is_final_input) {
  int r;
  unsigned char c;
  size_t scan_state = stack->scan_state_;
  const size_t *transition_table = rxg_scan_table; /* replace with actual */
  const size_t *actions = rxg_scan_actions;        /* replace with actual */
  const size_t default_action = 0;                 /* replace with actual */
  const size_t start_state = 1;                    /* replace with actual */
  const size_t start_action = rxg_scan_actions[start_state];

  size_t match_index = stack->match_index_;

  size_t best_match_action = stack->best_match_action_;
  size_t best_match_size = stack->best_match_size_;
  size_t best_match_offset = stack->best_match_offset_;
  int best_match_line = stack->best_match_line_;
  int best_match_col = stack->best_match_col_;

  size_t input_index = stack->input_index_;
  size_t input_offset = stack->input_offset_;
  int input_line = stack->input_line_;
  int input_col = stack->input_col_;

  /* Move any prior token out of the way */
  if (stack->token_size_) {
    stack->match_buffer_[stack->token_size_] = stack->terminator_repair_;

    memcpy(stack->match_buffer_, stack->match_buffer_ + stack->token_size_, stack->match_buffer_size_ - stack->token_size_);
    stack->match_buffer_size_ -= stack->token_size_;
    stack->match_offset_ = stack->best_match_offset_;
    stack->match_line_ = stack->best_match_line_;
    stack->match_col_ = stack->best_match_col_;
    
    /* Reset scanner to get ready for next token */
    stack->match_index_ = 0;
    stack->best_match_action_ = best_match_action = start_action;
    stack->best_match_size_ = best_match_size = 0;
    stack->scan_state_ = scan_state = start_state;
    stack->token_size_ = 0;
    
  }

  size_t at_match_index_offset = stack->match_offset_;
  int at_match_index_line = stack->match_line_;
  int at_match_index_col = stack->match_col_;
  assert(!match_index || (match_index == stack->match_buffer_size_));
  while (match_index < stack->match_buffer_size_) {
    c = (unsigned char)stack->match_buffer_[match_index];
    scan_state = transition_table[256 * scan_state + c];
    if (scan_state) {
      at_match_index_offset++;
      if (c != '\n') {
        at_match_index_col++;
      }
      else {
        at_match_index_col = 1;
        at_match_index_line++;
      }

      size_t state_action = actions[scan_state];
      if (state_action != default_action) /* replace with actual */ {
        best_match_action = state_action;
        best_match_size = match_index + 1;
        best_match_offset = at_match_index_offset;
        best_match_line = at_match_index_line;
        best_match_col = at_match_index_col;
      }
      match_index++;
    }
    else {
      /* error, or, end of token, depending on whether we have a match before */
      if (best_match_action == default_action) {
        goto syntax_error;
      }

      /* Ensure token match is null terminated */
      stack->terminator_repair_ = stack->match_buffer_[best_match_size];
      stack->match_buffer_[best_match_size] = '\0';
      stack->token_size_ = best_match_size;
      stack->best_match_action_ = best_match_action;
      stack->best_match_size_ = best_match_size;
      stack->best_match_offset_ = best_match_offset;
      stack->best_match_line_ = best_match_line;
      stack->best_match_col_ = best_match_col;

      return RXG_MATCH;
    }
  }

  while (input_index < input_size) {
    c = (unsigned char)input[input_index];
    scan_state = transition_table[256 * scan_state + c];
    if (scan_state) {
      input_offset++;
      if (c != '\n') {
        input_col++;
      }
      else {
        input_col = 1;
        input_line++;
      }
      size_t state_action = actions[scan_state];
      if (state_action != default_action) /* replace with actual */ {
        best_match_action = state_action;
        best_match_size = stack->match_buffer_size_ + input_index - stack->input_index_ + 1;
        best_match_col = input_col;
        best_match_line = input_line;
      }
      input_index++;
    }
    else {
      /* Append from stack->input_index_ to input_index, excluding input_index itself */
      r = rxg_append_match_buffer(stack, input + stack->input_index_, input_index - stack->input_index_);
      if (r) return r;
 
      if (best_match_action == default_action) {
        goto syntax_error;
      }

      /* Ensure token match is null terminated, note that the size we just appended may
       * (likely) be longer than the last section we matched. */
      stack->terminator_repair_ = stack->match_buffer_[best_match_size];
      stack->match_buffer_[best_match_size] = '\0';
      stack->token_size_ = best_match_size;
      stack->best_match_action_ = best_match_action;
      stack->best_match_size_ = best_match_size;
      stack->best_match_offset_ = best_match_offset;
      stack->best_match_line_ = best_match_line;
      stack->best_match_col_ = best_match_col;

      return RXG_MATCH;
    }
  }

  r = rxg_append_match_buffer(stack, input + stack->input_index_, input_index - stack->input_index_);
  if (r) return r;

  if (!is_final_input) {
    /* Need more input */
    stack->scan_state_ = scan_state;
    stack->token_size_ = 0; /* no match yet */
    stack->input_index_ = 0;
    stack->input_offset_ = input_offset;
    stack->input_line_ = input_line;
    stack->input_col_ = input_col;

    stack->best_match_action_ = best_match_action;
    stack->best_match_size_ = best_match_size;
    stack->best_match_offset_ = best_match_offset;
    stack->best_match_line_ = best_match_line;
    stack->best_match_col_ = best_match_col;

    stack->match_index_ = match_index;

    return RXG_FEED_ME;
  }

  if (!stack->match_buffer_size_ && (stack->input_index_ == input_size)) {
    /* Exhausted all input - leave stack in a state where we can
     * immediately re-use it in its initial state */
    stack->match_index_ = 0;
    stack->best_match_action_ = best_match_action = start_action;
    stack->best_match_size_ = best_match_size;
    stack->best_match_offset_ = best_match_offset;
    stack->best_match_line_ = best_match_line;
    stack->best_match_col_ = best_match_col;
    stack->scan_state_ = scan_state = start_state;

    stack->token_size_ = 0;
    stack->input_index_ = 0;
    stack->input_offset_ = input_offset;
    stack->input_line_ = input_line;
    stack->input_col_ = input_col;

    return RXG_END_OF_INPUT;
  }

  if (best_match_action == default_action) {
    goto syntax_error;
  }

  /* Ensure token match is null terminated */
  stack->terminator_repair_ = stack->match_buffer_[best_match_size];
  stack->match_buffer_[best_match_size] = '\0';
  stack->token_size_ = best_match_size;
  stack->best_match_action_ = best_match_action;
  stack->best_match_size_ = best_match_size;
  stack->best_match_offset_ = best_match_offset;
  stack->best_match_line_ = best_match_line;
  stack->best_match_col_ = best_match_col;

  return RXG_MATCH;
syntax_error:
  if (stack->match_buffer_size_) {
    stack->best_match_offset_ = stack->match_offset_ + 1;
    if (stack->match_buffer_[0] != '\n') {
      stack->best_match_line_ = stack->match_line_;
      stack->best_match_col_ = stack->match_col_ + 1;
    }
    else {
      stack->best_match_line_ = stack->match_line_ + 1;
      stack->best_match_col_ = 1;
    }
  }
  else {
    /* Append the single character causing the syntax error */
    r = rxg_append_match_buffer(stack, input + stack->input_index_, 1);
    if (r) return r;

    input_offset++;
    if (input[stack->input_index_] != '\n') {
      input_col++;
    }
    else {
      input_col = 1;
      input_line++;
    }
    input_index = stack->input_index_ + 1;
    stack->best_match_offset_ = input_offset;
    stack->best_match_line_ = input_line;
    stack->best_match_col_ = input_col;
  }
  
  /* Reset scanner to get ready for next token */
  stack->token_size_ = 1;
  stack->terminator_repair_ = stack->match_buffer_[1];
  stack->match_buffer_[1] = '\0';

  stack->input_index_ = input_index;
  stack->input_offset_ = input_offset;
  stack->input_line_ = input_line;
  stack->input_col_ = input_col;

  return RXG_SYNTAX_ERROR;
}
#endif

int rxg_parse_tkr(struct rxg_stack *stack, struct prd_grammar *g, struct tkr_tokenizer *tkr, int end_of_input, struct symbol_table *st) {
  int sym;
  char char_value = 0;

  if (!end_of_input) {
    token_type_t tkt = (token_type_t)tkr->best_match_variant_;
    if (!g->accept_whitespace_ && (tkt == TOK_WHITESPACE)) {
      /* Eat whitespace */
      return PRD_NEXT;
    }

    switch (tkt) {
    case TOK_IDENT: sym = RXG_IDENT; break;
    case TOK_PAR_OPEN: sym = RXG_PAR_OPEN; break;
    case TOK_PAR_CLOSE: sym = RXG_PAR_CLOSE; break;
    case TOK_CUBRACE_OPEN: sym = RXG_CUR_OPEN; break;
    case TOK_CUBRACE_CLOSE: sym = RXG_CUR_CLOSE; break;
    case TOK_COLON: sym = RXG_COLON; break;
    case TOK_SEMICOLON: sym = RXG_SEMICOLON; break;
    case TOK_SQBRACE_OPEN: sym = RXG_SQ_OPEN; break;
    case TOK_SQBRACE_CLOSE: sym = RXG_SQ_CLOSE; break;
    case TOK_DOT: sym = RXG_DOT; break;
    case TOK_DOLLAR: sym = RXG_DOLLAR; break;
    case TOK_CARET: sym = RXG_CARET; break;
    case TOK_MINUS: sym = RXG_DASH; break;
    case TOK_BAR: sym = RXG_BAR; break;
    case TOK_ASTERISK: sym = RXG_ASTERISK; break;
    case TOK_PLUS: sym = RXG_PLUS; break;
    case TOK_QUESTION_MARK: sym = RXG_QUESTION_MARK; break;
    case TOK_RESERVED_REGEX_CHAR: {
      return PRD_SYNTAX_ERROR;
    }
    case TOK_ESC_A: sym = RXG_CHAR; char_value = '\a'; break;
    case TOK_ESC_B: sym = RXG_CHAR; char_value = '\b'; break;
    case TOK_ESC_F: sym = RXG_CHAR; char_value = '\f'; break;
    case TOK_ESC_N: sym = RXG_CHAR; char_value = '\n'; break;
    case TOK_ESC_R: sym = RXG_CHAR; char_value = '\r'; break;
    case TOK_ESC_T: sym = RXG_CHAR; char_value = '\t'; break;
    case TOK_ESC_V: sym = RXG_CHAR; char_value = '\v'; break;
    case TOK_ESC_CHAR: sym = RXG_CHAR; char_value = tkr->xmatch_.translated_[1]; break;
    case TOK_ESC_HEX1: {
      sym = RXG_CHAR; 
      char c = tkr->xmatch_.translated_[2];
      if ((c >= '0') && (c <= '9')) char_value = c - '0';
      if ((c >= 'a') && (c <= 'f')) char_value = 0xA + c - 'a';
      if ((c >= 'A') && (c <= 'F')) char_value = 0xA + c - 'A';
      break;
    }
    case TOK_ESC_HEX2: {
      sym = RXG_CHAR; 
      char c = tkr->xmatch_.translated_[2];
      if ((c >= '0') && (c <= '9')) char_value = c - '0';
      if ((c >= 'a') && (c <= 'f')) char_value = 0xA + c - 'a';
      if ((c >= 'A') && (c <= 'F')) char_value = 0xA + c - 'A';
      c = tkr->xmatch_.translated_[3];
      if ((c >= '0') && (c <= '9')) char_value = (char_value << 4) + c - '0';
      if ((c >= 'a') && (c <= 'f')) char_value = (char_value << 4) + 0xA + c - 'a';
      if ((c >= 'A') && (c <= 'F')) char_value = (char_value << 4) + 0xA + c - 'A';
      break;
    }
    case TOK_ESC_OCT1: {
      sym = RXG_CHAR;
      char c = tkr->xmatch_.translated_[1];
      char_value = c - '0';
      break;
    }
    case TOK_ESC_OCT2: {
      sym = RXG_CHAR;
      char c = tkr->xmatch_.translated_[1];
      char_value = c - '0';
      c = tkr->xmatch_.translated_[2];
      char_value = (char_value << 3) + c - '0';
      break;
    }
    case TOK_ESC_OCT3: {
      sym = RXG_CHAR;
      char c = tkr->xmatch_.translated_[1];
      char_value = c - '0';
      c = tkr->xmatch_.translated_[2];
      char_value = (char_value << 3) + c - '0';
      c = tkr->xmatch_.translated_[3];
      char_value = (char_value << 3) + c - '0';
      break;
    }
    case TOK_CHAR: {
      sym = RXG_CHAR;
      char_value = tkr->xmatch_.translated_[0];
      break;
    }
    case TOK_WHITESPACE: sym = RXG_WHITESPACE; break;
    default: {
      sym = RXG_TOKEN;
    }
    }
  }
  else {
    sym = RXG_INPUT_END;
  }

  return rxg_parse(stack, sym, g, tkr, st, char_value);
}

