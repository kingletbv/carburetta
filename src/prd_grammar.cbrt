/* Copyright 2020-2023 Kinglet B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef STDIO_H_INCLUDED
#define STDIO_H_INCLUDED
#include <stdio.h>
#endif

#ifndef STDLIB_H_INCLUDED
#define STDLIB_H_INCLUDED
#include <stdlib.h>
#endif

#ifndef STDINT_H_INCLUDED
#define STDINT_H_INCLUDED
#include <stdint.h>
#endif

#ifndef STRING_H_INCLUDED
#define STRING_H_INCLUDED
#include <string.h>
#endif

#ifndef ERRNO_H_INCLUDED
#define ERNNO_H_INCLUDED
#include <errno.h>
#endif

#ifndef ASSERT_H_INCLUDED
#define ASSERT_H_INCLUDED
#include <assert.h>
#endif

#ifndef TOKENIZER_H_INCLUDED
#define TOKENIZER_H_INCLUDED
#include "tokenizer.h"
#endif

#ifndef TOKENS_H_INCLUDED
#define TOKENS_H_INCLUDED
#include "tokens.h"
#endif

#ifndef REPORT_ERROR_H_INCLUDED
#define REPORT_ERROR_H_INCLUDED
#include "report_error.h"
#endif

#ifndef PRD_GRAM_H_INCLUDED
#define PRD_GRAM_H_INCLUDED
#include "prd_gram.h"
#endif

#ifndef PRD_GRAMMAR_H_INCLUDED
#define PRD_GRAMMAR_H_INCLUDED
#include "prd_grammar.h"
#endif

%prefix prd_

%token ident colon equals semicolon token par-open par-close cubrace-open cubrace-close dollar
%nt grammar rule production action-sequence stmt-action start-c-tokenizer end-c-tokenizer accept-whitespace common-action

%token_type struct { \
  token_type_t match_; \
  token_type_t variant_; \
  struct xlts text_; \
}
%constructor $$.match_ = $$.variant_ = (token_type_t)0; \
             xlts_init(&$$.text_);
%destructor xlts_cleanup(&$$.text_);

%token_action $$.match_ = (token_type_t)tkr->best_match_action_; \
              $$.variant_ = (token_type_t)tkr->best_match_variant_; \
			  xlts_append(&$$.text_, &tkr->xmatch_);

%nt_type rule production action-sequence stmt-action: struct prd_production
%constructor prd_prod_init(&$$);
%destructor prd_prod_cleanup(&$$);

%params struct prd_grammar *g, struct tkr_tokenizer *tkr, struct symbol_table *st
%locals int r; \
        struct prd_production *pd;

%on_finish         return PRD_SUCCESS;
%on_alloc_error    re_error_tkr(tkr, "Error: no memory"); return PRD_INTERNAL_ERROR;
%on_internal_error re_error_tkr(tkr, "Error: internal error\n"); return PRD_INTERNAL_ERROR;
%on_next_token     return PRD_NEXT;

%on_syntax_error /* Syntax error */ \
  if (sym != PRD_INPUT_END) {\
    re_error_tkr(tkr, "Syntax error \"%s\" not expected", tkr->xmatch_.translated_); \
  } \
  else { \
    re_error_tkr(tkr, "Syntax error: end of input not expected");   \
  } \
  return PRD_SYNTAX_ERROR;

%grammar%

grammar: { }
grammar: grammar production {
	/* Store the PRD_PRODUCTION in the prd_grammar->productions_ array */
	r = prd_grammar_check_production_reserve(g);
	if (r) return r;
	pd = g->productions_ + g->num_productions_++;
	prd_prod_init(pd);
	prd_prod_swap(pd, &$1);
  r = snippet_append_snippet(&pd->common_action_sequence_, &g->current_common_action_sequence_);
  if (r) return r;
}

grammar: grammar common-action {
  /* Common actions are recorded in their own productions */
}

production: IDENT COLON rule SEMICOLON {
	prd_prod_swap(&$$, &$2);
	pd = &$$;
	xlts_append(&pd->nt_.id_, &$0.text_);
}

production: IDENT COLON rule start-c-tokenizer stmt-action end-c-tokenizer SEMICOLON {
	prd_prod_swap(&$$, &$2);
	pd = &$$;
	xlts_append(&pd->nt_.id_, &$0.text_);

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	r = snippet_append_snippet(&pd->action_sequence_, & $4.action_sequence_);
	if (r) return r;

	/* Append the semicolon to the snippets */
	r = snippet_append(&pd->action_sequence_, $6.match_, $6.variant_, &$6.text_);
	if (r) return r;
}
production: IDENT COLON rule start-c-tokenizer accept-whitespace CUBRACE_OPEN action-sequence end-c-tokenizer CUBRACE_CLOSE {
	prd_prod_swap(&$$, &$2);
	pd = &$$;
	xlts_append(&pd->nt_.id_, &$0.text_);

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	/* Append the cubrace-open to the snippets */
	r = snippet_append(&pd->action_sequence_, $5.match_, $5.variant_, &$5.text_);
	if (r) return r;

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	r = snippet_append_snippet(&pd->action_sequence_, &$6.action_sequence_);
	if (r) return r;

	/* Append the cubrace-close to the snippets */
	r = snippet_append(&pd->action_sequence_, $8.match_, $8.variant_, &$8.text_);
	if (r) return r;
}

common-action: DOLLAR COLON start-c-tokenizer stmt-action end-c-tokenizer SEMICOLON {
  /* Analogous to regular production actions, except we're moving it into the grammar's
   * current common action sequence. */
  snippet_clear(&g->current_common_action_sequence_);

  /* append stmt-action */
  r = snippet_append_snippet(&g->current_common_action_sequence_, &$3.action_sequence_);
  if (r) return r;
  
  /* append semicolon */
  r = snippet_append(&g->current_common_action_sequence_, $5.match_, $5.variant_, &$5.text_);
  if (r) return r;
}

common-action: DOLLAR COLON start-c-tokenizer accept-whitespace CUBRACE_OPEN action-sequence end-c-tokenizer CUBRACE_CLOSE {
  /* Analogous to regular production actions, except we're moving it into the grammar's
   * current common action sequence. */
  snippet_clear(&g->current_common_action_sequence_);

  /* If action-sequence is empty, then we'd like to preserve this empty-ness by making the common-action 
   * empty as well. This allows generating code to discover that there is no common-action */
  if ($5.action_sequence_.num_tokens_) {
    r = snippet_append(&g->current_common_action_sequence_, $4.match_, $4.variant_, &$4.text_);
    if (r) return r;

    r = snippet_append_snippet(&g->current_common_action_sequence_, &$5.action_sequence_);
    if (r) return r;

    r = snippet_append(&g->current_common_action_sequence_, $7.match_, $7.variant_, &$7.text_);
    if (r) return r;
  }
}

rule: ; /* Default PRD_RULE reduction sym has empty initialized prod_ which works for us. */
rule: rule IDENT {
	/* Grab ident from position 1, reduce */
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	if (pd->num_syms_ == pd->num_syms_allocated_) {
		r = prd_prod_check_sym_reserve(pd, &$1.text_);
		if (r) return r;
	}
	struct prd_production_sym *pps = pd->syms_ + pd->num_syms_++;
	prd_production_sym_init(pps);
	r = xlts_append(&pps->id_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}

stmt-action: EQUALS accept-whitespace; /* Return vacuous prd_production */
stmt-action: stmt-action IDENT {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
stmt-action: stmt-action COLON {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
stmt-action: stmt-action EQUALS {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
stmt-action: stmt-action TOKEN {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
stmt-action: stmt-action DOLLAR {
  prd_prod_swap(&$$, &$0);
  pd = &$$;
  r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
  if (r) return PRD_INTERNAL_ERROR;
}
stmt-action: stmt-action PAR_OPEN action-sequence PAR_CLOSE {
	prd_prod_swap(&$$, &$0);
	pd = &$$;

	/* Append the par-open to the snippets */
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return r;

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	r = snippet_append_snippet(&pd->action_sequence_, &$2.action_sequence_);
	if (r) return r;

	/* Append the par-close to the snippets */
	r = snippet_append(&pd->action_sequence_, $3.match_, $3.variant_, &$3.text_);
	if (r) return r;
}
stmt-action: stmt-action CUBRACE_OPEN action-sequence CUBRACE_CLOSE {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	/* Append the cubrace-open to the snippets */
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return r;

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	r = snippet_append_snippet(&pd->action_sequence_, &$2.action_sequence_);
	if (r) return r;

	/* Append the cubrace-close to the snippets */
	r = snippet_append(&pd->action_sequence_, $3.match_, $3.variant_, &$3.text_);
	if (r) return r;
}

action-sequence: ; /* Return vacuous prd_production */
action-sequence: action-sequence IDENT {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
action-sequence: action-sequence COLON {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
action-sequence: action-sequence EQUALS {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
action-sequence: action-sequence SEMICOLON {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
action-sequence: action-sequence TOKEN {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
action-sequence: action-sequence DOLLAR {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return PRD_INTERNAL_ERROR;
}
action-sequence: action-sequence PAR_OPEN action-sequence PAR_CLOSE {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	/* Append the par-open to the snippets */
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return r;

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	r = snippet_append_snippet(&pd->action_sequence_, &$2.action_sequence_);
	if (r) return r;

	/* Append the par-close to the snippets */
	r = snippet_append(&pd->action_sequence_, $3.match_, $3.variant_, &$3.text_);
	if (r) return r;
}
action-sequence: action-sequence CUBRACE_OPEN action-sequence CUBRACE_CLOSE {
	prd_prod_swap(&$$, &$0);
	pd = &$$;
	/* Append the cubrace-open to the snippets */
	r = snippet_append(&pd->action_sequence_, $1.match_, $1.variant_, &$1.text_);
	if (r) return r;

	/* Move snippets in; could do this more efficiently by manually swapping pointers; but this works.. */
	r = snippet_append_snippet(&pd->action_sequence_, &$2.action_sequence_);
	if (r) return r;

	/* Append the cubrace-close to the snippets */
	r = snippet_append(&pd->action_sequence_, $3.match_, $3.variant_, &$3.text_);
	if (r) return r;
}

start-c-tokenizer: = tok_switch_to_c_idents(tkr);
end-c-tokenizer: {
	tok_switch_to_nonterminal_idents(tkr);
	g->accept_whitespace_ = 0; /* Reset to normal tokens */
}

accept-whitespace: {
	/* Welcome whitespace from this point. Note that this point is *after* the lookahead at the point
	 * that the PRD_ACCEPT_WHITESPACE non-terminal appears. Therefore, it is *after* the EQUALS sign and
	 * *after* the curly opening brace. */
	g->accept_whitespace_ = 1;
}


%%

int prd_parse_tkr(struct prd_stack *stack, struct prd_grammar *g, struct tkr_tokenizer *tkr, int end_of_input, struct symbol_table *st) {
  int sym;

  if (!end_of_input) {
    token_type_t tkt = (token_type_t)tkr->best_match_variant_;
    if (!g->accept_whitespace_ && (tkt == TOK_WHITESPACE)) {
      /* Eat whitespace */
      return PRD_NEXT;
    }
    switch (tkt) {
    case TOK_IDENT: sym = PRD_IDENT; break;
    case TOK_COLON: sym = PRD_COLON; break;
    case TOK_EQUALS: sym = PRD_EQUALS; break;
    case TOK_SEMICOLON: sym = PRD_SEMICOLON; break;
    case TOK_PAR_OPEN: sym = PRD_PAR_OPEN; break;
    case TOK_PAR_CLOSE: sym = PRD_PAR_CLOSE; break;
    case TOK_CUBRACE_OPEN: sym = PRD_CUBRACE_OPEN; break;
    case TOK_CUBRACE_CLOSE: sym = PRD_CUBRACE_CLOSE; break;
    case TOK_SPECIAL_IDENT: 
      if (!strcmp("$", tkr_str(tkr))) {
        /* Single '$' is recognized as a dollar.. */
        sym = PRD_DOLLAR;
      }
      else {
        sym = PRD_TOKEN;
      }
      break;
    default: sym = PRD_TOKEN; break;
    }
  }
  else {
    sym = PRD_INPUT_END;
  }
  
#if 0
  switch (prd_parse(stack, sym, g, tkr, st)) {
  case -2: return PRD_INTERNAL_ERROR;
  case -1: return PRD_SYNTAX_ERROR;
  case 0: return PRD_SUCCESS;
  case 1: return PRD_NEXT;
  default: return PRD_INTERNAL_ERROR;
  }
#else
  return prd_parse(stack, sym, g, tkr, st);
#endif
}
